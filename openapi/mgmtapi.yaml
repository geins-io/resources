openapi: 3.0.1
info:
  title: Geins Management API
  version: v1.11.0
  description: |
    
    Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions. 
    
    :::tip Tip
    With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps.
    :::  
 
    ## Getting started
    Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.  
    You can find all your API credentials in `Geins Merchant Center`. 

    ### Fast track
    Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.

    Or, if you prefer to just take it for a test run:
    
    [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)
  
    ### Authentication
    Two authentication methods are required:
      - `Basic Auth`
      - `API Key`  

    All API credentials can be found in `Geins Merchant Center`.
  
    #### Basic Auth
    A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.  
    See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.

    #### API Key
     A `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.
    
    #### Example
    ```bash
    curl -X GET "https://mgmtapi.geins.io/API/Market/List" \
    -H "Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]" \
    -H "X-ApiKey: [API-KEY]"
    ```
servers:
  - url: https://mgmtapi.carismar.io/
  -
paths:
  /API/Brand/{id}:
    get:
      tags:
        - Brand
      summary: Get brand
      description: Gets a specific brand by id.
      operationId: Get brand
      parameters:
        - name: id
          in: path
          description: The id of the brand to get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested brand.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Brand.Models.Read.Brand'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Brand
      summary: Update brand
      description: "Leaving out a property will ensure no changes are made to that property.  \r\nCollection properties will delete and/or add as necessary to match the supplied data."
      operationId: Update brand
      parameters:
        - name: id
          in: path
          description: The id of the brand to update.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The brand data to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand.Models.Write.Brand'
        required: true
      responses:
        '200':
          description: The updated brand.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Brand.Models.Read.Brand'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: brand
  /API/Brand/Query:
    post:
      tags:
        - Brand
      summary: Query brands
      operationId: Query brands
      requestBody:
        description: The details of the brand query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand.Models.BrandQuery'
        required: true
      responses:
        '200':
          description: A collection of brands matching the supplied query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand.Models.Read.Brand'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/Brand:
    post:
      tags:
        - Brand
      summary: Create brand
      operationId: Create brand
      requestBody:
        description: The brand to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand.Models.Write.Brand'
        required: true
      responses:
        '200':
          description: The created brand.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Brand.Models.Read.Brand'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: brand
  /API/Category/{id}:
    get:
      tags:
        - Category
      summary: Get category
      operationId: Get category
      parameters:
        - name: id
          in: path
          description: The id of the category to get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Category.Models.Read.Category'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Category
      summary: Update category
      description: "Leaving out a property will ensure no changes are made to that property.  \r\nCollection properties will delete and/or add as necessary to match the supplied data."
      operationId: Update category
      parameters:
        - name: id
          in: path
          description: The id of the category to update.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The category data to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category.Models.Write.Category'
        required: true
      responses:
        '200':
          description: The updated category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Category.Models.Read.Category'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: category
  /API/Category/Query:
    post:
      tags:
        - Category
      summary: Query categories
      operationId: Query categories
      requestBody:
        description: The query to filter categories by.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category.Models.CategoryQuery'
        required: true
      responses:
        '200':
          description: A collection of categories matching the supplied query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category.Models.Read.Category'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/Category:
    post:
      tags:
        - Category
      summary: Create category
      operationId: Create category
      requestBody:
        description: The category to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category.Models.Write.Category'
        required: true
      responses:
        '200':
          description: The created category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Category.Models.Read.Category'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: category
  /API/Market/List:
    get:
      tags:
        - Market
      summary: List markets
      description: Gets a list of all markets
      operationId: List markets
      responses:
        '200':
          description: A collection of markets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Market.Models.Market'
      security:
        - basicAuth: []
          apiKey: []
  /API/Market/{marketId}:
    get:
      tags:
        - Market
      summary: Get market
      operationId: Get market
      parameters:
        - name: marketId
          in: path
          description: The id of the market to get.
          required: true
          schema:
            type: string
        - name: marketIdType
          in: query
          description: "The type of market id supplied.  \r\n0 = Internal. Internal market id set by Geins.  \r\n1 = Name. The name of the market."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
      responses:
        '200':
          description: The requested market.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Market.Models.Market'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/Count/{email}:
    get:
      tags:
        - Order
      summary: Count orders
      description: Gets the number of orders placed with the supplied email address.
      operationId: Count orders
      parameters:
        - name: email
          in: path
          description: The email adress to aggregate on.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The number of orders placed with the given email.
          content:
            application/json:
              schema:
                type: integer
                format: int32
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/Query:
    post:
      tags:
        - Order
      summary: Query orders
      description: Queries orders.
      operationId: Query orders
      requestBody:
        description: The details of the query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Models.OrderQuery'
        required: true
      responses:
        '200':
          description: A collection of orders matching the supplied query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order.Models.Order'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/Order/Id:
    post:
      tags:
        - Order
      summary: Create order id
      description: Create a new order id.
      operationId: Create order id
      responses:
        '200':
          description: The id of the created order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Int'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order:
    post:
      tags:
        - Order
      summary: Create order
      description: Create a new order.
      operationId: Create order
      requestBody:
        description: The order object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Models.Order'
        required: true
      responses:
        '200':
          description: The id of the created order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Int'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: order
  /API/Order/{id}/{include}:
    get:
      tags:
        - Order
      summary: Get order (id)
      description: Get order by id.
      operationId: Get order (id)
      parameters:
        - name: id
          in: path
          description: The ID of the order to get.
          required: true
          schema:
            type: integer
            format: int32
        - name: include
          in: path
          description: "A comma separated string of related collections to include with this result set.  \r\nPossible values are:  \r\nrows  \r\npaymentdetails  \r\nshippingdetails  \r\nrefunds"
          required: true
          schema:
            type: string
        - name: combineProductContainerRows
          in: query
          description: >-
            If true, will combine all order rows that are part of a container
            into a single container row.
          schema:
            type: boolean
      responses:
        '200':
          description: The order with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order.Models.Order'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
      security:
        - basicAuth: []
          apiKey: []
  /API/OrderByPublicId/{publicId}/{include}:
    get:
      tags:
        - Order
      summary: Get order (public id)
      description: Get order by public id.
      operationId: Get order (public id)
      parameters:
        - name: publicId
          in: path
          description: The Public ID of the order to get.
          required: true
          schema:
            type: string
            format: uuid
        - name: include
          in: path
          description: "A comma separated string of related collections to include with this result set.  \r\nPossible values are:  \r\nrows  \r\npaymentdetails  \r\nshippingdetails  \r\nrefunds"
          required: true
          schema:
            type: string
        - name: combineProductContainerRows
          in: query
          description: >-
            If true, will combine all order rows that are part of a container
            into a single container row.
          schema:
            type: boolean
      responses:
        '200':
          description: The order with the given public id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order.Models.Order'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/{id}:
    delete:
      tags:
        - Order
      summary: Delete order
      description: Deletes or deactivates an order.
      operationId: Delete order
      parameters:
        - name: id
          in: path
          description: The ID of the order to delete.
          required: true
          schema:
            type: integer
            format: int32
        - name: operation
          in: query
          description: "The method of deletion desired.  \r\n0 = OnHold. Put this order on hold.  \r\n1 = Cancel. Cancel this order permanently.  \r\n2 = Deactivate. Mark this order as no longer active."
          required: true
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: object
      security:
        - basicAuth: []
          apiKey: []
    patch:
      tags:
        - Order
      summary: Partial update of an order
      operationId: Partial update of order
      parameters:
        - name: id
          in: path
          description: The orderId of the order to update
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The order object containing the properties that should be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Models.OrderUpdate'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: order
  /API/Order/{orderId}/OrderRow/{orderRowId}:
    delete:
      tags:
        - Order
      summary: Cancel order row
      description: "Cancels an order row.  \r\nCan only be done on an order that has not been delivered or cancelled."
      operationId: Cancel order row
      parameters:
        - name: orderId
          in: path
          description: The id of the order containing the order row.
          required: true
          schema:
            type: integer
            format: int32
        - name: orderRowId
          in: path
          description: The id of the order row to cancel.
          required: true
          schema:
            type: integer
            format: int32
        - name: skipRestock
          in: query
          description: >-
            If true will not restock the item that was cancelled. Defaults to
            false.
          schema:
            type: boolean
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/Statuses:
    get:
      tags:
        - Order
      summary: Get order statuses
      description: Get a list of available order statuses.
      operationId: Get order statuses
      responses:
        '200':
          description: A list of order statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order.Models.OrderStatus'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/{id}/Status/{status}/{transactionId}/{secondaryTransactionId}:
    post:
      tags:
        - Order
      summary: Update order status
      operationId: Update order status
      parameters:
        - name: id
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: path
          description: "The order status to set.  \r\n0 = Undefined  \r\n1 = Completed  \r\n2 = Cancelled  \r\n3 = OnHold  \r\n4 = Inactive  \r\n5 = OutOfStock  \r\n6 = Backorder  \r\n7 = Pending"
          required: true
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
        - name: transactionId
          in: path
          description: A transaction id can be set here if status is set to pending.
          required: true
          schema:
            type: string
        - name: secondaryTransactionId
          in: path
          description: >-
            A secondary transaction id, if any, can be set here if status is set
            to pending.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/PaymentDetail/{paymentDetailId}/SetAsPaid:
    post:
      tags:
        - Order
      summary: Set payment as paid
      operationId: Set payment as paid
      parameters:
        - name: paymentDetailId
          in: path
          description: Payment Detail ID.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/Capture/{captureId}:
    get:
      tags:
        - Order
      summary: Get capture
      operationId: Get capture
      parameters:
        - name: captureId
          in: path
          description: Capture ID.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Order.Capture'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/Capture/SetAsProcessed:
    post:
      tags:
        - Order
      summary: Set capture as processed
      description: Sets a capture as processed (= captured).
      operationId: Set capture as processed
      requestBody:
        description: Contains CaptureId and optional metadata about capture.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.ProcessedCapture'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: processedCapture
  /API/Order/ValidateCreation:
    post:
      tags:
        - Order
      summary: Validate order
      description: Validates order data for order creation.
      operationId: Validate order
      requestBody:
        description: The order data to validate.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.ValidateOrderCreationRequest'
        required: true
      responses:
        '200':
          description: The validation result.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-API.Order.OrderCreationValidationStatus
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: request
  /API/Order/{id}/Comment:
    post:
      tags:
        - Order
      summary: Add order comment
      description: Adds a comment to an order. This does not replace any previous comments.
      operationId: Add order comment
      parameters:
        - name: id
          in: path
          description: Order ID.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/API.Order.OrderComment'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: orderComment
  /API/Order/{id}/TransactionData:
    post:
      tags:
        - Order
      summary: Update transaction data
      description: Updates transaction data on an order.
      operationId: Update transaction data
      parameters:
        - name: id
          in: path
          description: Order ID.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The transaction data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/API.Order.TransactionData'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: transactionData
  /API/PageAreaFamily/List:
    get:
      tags:
        - PageArea
      summary: List page area families
      description: Gets a list of all page area families, including nested data.
      operationId: List page area families
      responses:
        '200':
          description: A collection of all page area families.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-List-PageArea.Models.Read.PageAreaFamily
      security:
        - basicAuth: []
          apiKey: []
  /API/PageAreaFamily/{familyId}:
    get:
      tags:
        - PageArea
      summary: Get page area family
      description: Gets a specific page area family.
      operationId: Get page area family
      parameters:
        - name: familyId
          in: path
          description: The id of the page area family to get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The page area family with the given id.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-PageArea.Models.Read.PageAreaFamily
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/PageArea/{name}:
    get:
      tags:
        - PageArea
      summary: Get page area
      description: Gets a specific page area.
      operationId: Get page area
      parameters:
        - name: name
          in: path
          description: The name of the page area to get.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The page area with the given name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-PageArea.Models.Read.PageArea'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/PageAreaFamily:
    post:
      tags:
        - PageArea
      summary: Create/update page area family
      description: Creates or updates a page area family.
      operationId: Create/update page area family
      requestBody:
        description: The family model to create or update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageArea.Models.Write.PageAreaFamily'
        required: true
      responses:
        '200':
          description: The affected page area family.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-PageArea.Models.Read.PageAreaFamily
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: family
  /API/PageArea:
    post:
      tags:
        - PageArea
      summary: Create/update page area
      description: Creates or updates a page area.
      operationId: Create/update page area
      requestBody:
        description: The area model to create or update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageArea.Models.Write.PageArea'
        required: true
      responses:
        '200':
          description: The affected page area.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-PageArea.Models.Read.PageArea'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: area
  /API/Payment/Query:
    post:
      tags:
        - Payment
      summary: Query payment options
      operationId: Query payment options
      requestBody:
        description: The payment query
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment.Models.PaymentOptionQuery'
        required: true
      responses:
        '200':
          description: A collection of payment options matching the supplied query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment.Models.PaymentOption'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/PriceList/List:
    get:
      tags:
        - PriceList
      summary: List price lists
      description: "Gets all price list definitions.  \r\n- Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  \r\n- ID for Ordinary, Sale and Campaign price lists starts from 1000000.  \r\nThe ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary=0, Sale=1, Capaign=2)  \r\nEg:  \r\nOrdinary price list for market with ID 1 has ID = 1000000  \r\nSale price list for market with ID 1 has ID = 1000001  \r\nCampaign price list for market with ID 1 has ID = 1000002  \r\nOrdinary price list for market with ID 2 has ID = 2000000"
      operationId: List price lists
      responses:
        '200':
          description: A collection of price lists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriceList.Models.PriceList'
      security:
        - basicAuth: []
          apiKey: []
  /API/PriceList/Price:
    put:
      tags:
        - PriceList
      summary: Update price list prices
      description: "Updates price list prices.  \r\n- Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  \r\n- ID for Ordinary, Sale and Campaign price lists starts from 1000000.  \r\nThe ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary=0, Sale=1, Capaign=2)  \r\nEg:  \r\nOrdinary price list for market with ID 1 has ID = 1000000  \r\nSale price list for market with ID 1 has ID = 1000001  \r\nCampaign price list for market with ID 1 has ID = 1000002  \r\nOrdinary price list for market with ID 2 has ID = 2000000"
      operationId: Update price list prices
      parameters:
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: pricesIncVat
          in: query
          description: >-
            Set to true if prices includes VAT. Leave blank or set to false if
            they exclude VAT.
          schema:
            type: boolean
      requestBody:
        description: List of new price list prices.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceList.Models.Write.PriceListPrice'
        required: true
      responses:
        '200':
          description: The result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceList.Models.PriceListPriceResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceList.Models.PriceListPriceResponse'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: priceListPrices
  /API/Product/{productId}:
    get:
      tags:
        - Product
      summary: Get product
      description: >-
        Gets a specific product. Make sure to include relevant child-collections
        in the request.
      operationId: Get product
      parameters:
        - name: productId
          in: path
          description: The id of the product to get.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: include
          in: query
          description: "Set to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      responses:
        '200':
          description: The requested product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Product.Models.Read.Product'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Product
      summary: Update product
      description: Updates a product.
      operationId: Update product
      parameters:
        - name: productId
          in: path
          description: The id of the product to update.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: include
          in: query
          description: "Set to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: The product data to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.Write.Product'
        required: true
      responses:
        '200':
          description: The updated product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Product.Models.Read.Product'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: product
    delete:
      tags:
        - Product
      summary: Delete product
      description: Deletes a specific product.
      operationId: Delete product
      parameters:
        - name: productId
          in: path
          description: The id of the product to delete.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Product/Query:
    post:
      tags:
        - Product
      summary: Query products
      operationId: Query products
      parameters:
        - name: include
          in: query
          description: "Set to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: "The Product Query endpoint allows for product retrieval using various filters.  \r\n**Note:** `ProductIds`, `ArticleNumbers`, and `UpdatedAfter` are exclusive filters and cannot be combined in one query.  \r\nAdditional filters are available for more refined searches and can be used with any of the primary parameters."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.ProductQuery'
        required: true
      responses:
        '200':
          description: A collection of products matching the supplied query.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PagedEnvelope-List-Product.Models.Read.Product
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/Product/Query/{page}:
    post:
      tags:
        - Product
      summary: Query products (paged)
      description: "The batch id is mandatory when fetching any page other than the first page.  \r\nIf no batch id is provided for the first page, then a new batch is created.  \r\nBatch id and pagination information can be found in the response."
      operationId: Query products (paged)
      parameters:
        - name: page
          in: path
          description: >-
            The page to fetch. To start a new batched query it is mandatory to
            send in page=1.
          required: true
          schema:
            type: integer
            format: int32
        - name: include
          in: query
          description: "Set to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: The details of the query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.ProductQuery'
        required: true
      responses:
        '200':
          description: A collection of products matching the supplied query and batch page.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PagedEnvelope-List-Product.Models.Read.Product
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/Product:
    post:
      tags:
        - Product
      summary: Create product
      description: Creates a new product.
      operationId: Create product
      parameters:
        - name: include
          in: query
          description: "Set to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: The product to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.Write.Product'
        required: true
      responses:
        '200':
          description: The created product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Product.Models.Read.Product'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: product
  /API/Product/{productId}/Category:
    put:
      tags:
        - Product
      summary: Add category to product
      description: Adds a category relation to a product.
      operationId: Add category to product
      parameters:
        - name: productId
          in: path
          description: The id of the product to update.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The category to relate the product to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.ProductCategory'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productCategory
  /API/Product/MonitorAvailability:
    post:
      tags:
        - Product
      summary: Add availability monitor
      description: Adds a product availability monitor.
      operationId: Add availability monitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.MonitorSku'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: model
  /API/Product/Item/{itemId}:
    get:
      tags:
        - Product
      summary: Get product item
      description: Gets a specific product item (SKU).
      operationId: Get product item
      parameters:
        - name: itemId
          in: path
          description: The id of the product item to get.
          required: true
          schema:
            type: string
        - name: productItemIdType
          in: query
          description: "The type of product item id supplied.  \r\n0 = Internal. Internal product item id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123.  \r\n4 = ExternalId. External product item id set by customer.  \n            Eg: 10001."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
      responses:
        '200':
          description: The requested product item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.ProductItemEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Product
      summary: Update product item
      description: Updates a product item.
      operationId: Update product item
      parameters:
        - name: itemId
          in: path
          description: The id of the product item to update.
          required: true
          schema:
            type: string
        - name: productItemIdType
          in: query
          description: "The type of product item id supplied.  \r\n0 = Internal. Internal product item id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123.  \r\n4 = ExternalId. External product item id set by customer.  \n            Eg: 10001."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
      requestBody:
        description: The product item data to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.Write.ProductItem'
        required: true
      responses:
        '200':
          description: The updated product item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Product.Models.Read.ProductItem'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productItem
  /API/Product/Items:
    get:
      tags:
        - Product
      summary: List product items
      description: Gets all product items.
      operationId: List product items
      responses:
        '200':
          description: A collection with all product items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product.Models.Read.ProductItem'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Product
      summary: Update product items (batch)
      description: Updates product items in batch.
      operationId: Update product items (batch)
      parameters:
        - name: productItemIdType
          in: query
          description: "The type of product item ids supplied.  \r\n0 = Internal. Internal product item id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123.  \r\n4 = ExternalId. External product item id set by customer.  \n            Eg: 10001."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
      requestBody:
        description: The product items to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product.Models.Write.ProductItem'
        required: true
      responses:
        '200':
          description: The update result.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-Product.Models.Read.ProductItemResult
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productItems
  /API/Product/Items/{page}:
    get:
      tags:
        - Product
      summary: List product items (paged)
      description: Gets all product items with pagination.
      operationId: List product items (paged)
      parameters:
        - name: page
          in: path
          description: The page to fetch.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A collection with product items for the supplied page.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-List-Product.Models.Read.ProductItem
      security:
        - basicAuth: []
          apiKey: []
  /API/Product/{productId}/Item:
    post:
      tags:
        - Product
      summary: Create product item
      description: Creates a new product item.
      operationId: Create product item
      parameters:
        - name: productId
          in: path
          description: The id of the product to create an item on.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The product item to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Models.Write.ProductItem'
        required: true
      responses:
        '200':
          description: The created product item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Product.Models.Read.ProductItem'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productItem
  /API/Product/Stock:
    put:
      tags:
        - Product
      summary: Update stock (batch)
      description: Update stock values for multiple product items.
      operationId: Update stock (batch)
      parameters:
        - name: productItemIdType
          in: query
          description: "The type of product item id supplied.  \r\n0 = Internal. Internal product item id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123.  \r\n4 = ExternalId. External product item id set by customer.  \n            Eg: 10001."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
      requestBody:
        description: List of product item ids with new stock values.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product.Models.Write.ProductItemStock'
        required: true
      responses:
        '200':
          description: The update result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.StockEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.StockEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productItemStocks
  /API/Product/Stock/Query:
    post:
      tags:
        - Product
      summary: Query stock
      operationId: Query stock
      requestBody:
        description: The details of the query.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
      responses:
        '200':
          description: A collection of stock values matching the supplied query.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-List-Product.Models.Read.ProductItemStock
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productItemIds
  /API/Product/Feeds:
    get:
      tags:
        - Product
      summary: List feeds
      description: Gets a list of all feeds.
      operationId: List feeds
      responses:
        '200':
          description: A collection of feeds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-Product.Models.Read.Feed'
      security:
        - basicAuth: []
          apiKey: []
  /API/Product/RelationTypes:
    get:
      tags:
        - Product
      summary: List product relation types
      description: Gets a list of product relation types
      operationId: List product relation types
      responses:
        '200':
          description: A collection of product relation types.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-List-Product.Models.Read.RelationType
      security:
        - basicAuth: []
          apiKey: []
  /API/Product/{productId}/Related/{relationTypeId}:
    put:
      tags:
        - Product
      summary: Link related products
      description: Add related products to a product using a fixed relation type.
      operationId: Link related products
      parameters:
        - name: productId
          in: path
          description: The id of the main product to which the relations will be created.
          required: true
          schema:
            type: string
        - name: relationTypeId
          in: path
          description: >-
            The relation type id that will apply to all related products in
            relatedProducts.
          required: true
          schema:
            type: integer
            format: int32
        - name: productIdType
          in: query
          description: "The type of product id supplied in productId and relatedProducts.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The list of related products to link with the main product.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product.Models.Write.RelatedProduct'
        required: true
      responses:
        '200':
          description: The result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.RelatedProductEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.RelatedProductEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: relatedProducts
  /API/Product/{productId}/Related:
    put:
      tags:
        - Product
      summary: Add related products to a product
      operationId: Add related products to product
      parameters:
        - name: productId
          in: path
          description: The id of the main product to which the relations will be created
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied in productId and relatedProducts.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The list of related products to link with the main product.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product.Models.Write.RelatedProduct'
        required: true
      responses:
        '200':
          description: The result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.RelatedProductEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.RelatedProductEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: relatedProducts
  /API/Product/{productId}/UnlinkRelated/{relationTypeId}:
    put:
      tags:
        - Product
      summary: Unlink related products (via relation).
      description: Remove related products from a product using a fixed relation type.
      operationId: Unlink related products (via relation)
      parameters:
        - name: productId
          in: path
          description: The id of the main product from which the relations will be removed.
          required: true
          schema:
            type: string
        - name: relationTypeId
          in: path
          description: >-
            The relation type id that will apply to all related products in
            relatedProducts.
          required: true
          schema:
            type: integer
            format: int32
        - name: productIdType
          in: query
          description: "The type of product id supplied in productId and relatedProducts.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The list of related products to unlink from the main product.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product.Models.Write.RelatedProduct'
        required: true
      responses:
        '200':
          description: The result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.RelatedProductEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product.Models.RelatedProductEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: relatedProducts
  /API/Product/{productId}/Image/{imageName}:
    put:
      tags:
        - ProductImage
      summary: Add/update product image
      description: "Creates or updates an image on a product. If an image with the same file already exists it will be replaced.  \r\nThe image is included in the body of the request as binary data."
      operationId: Add/update product image
      parameters:
        - name: productId
          in: path
          description: The id of the product to update.
          required: true
          schema:
            type: string
        - name: imageName
          in: path
          description: The file name of the image that is uploaded.
          required: true
          schema:
            type: string
        - name: position
          in: query
          description: "The relative position of the image in the list of images for the product.  \r\nFor new images this will default to 1 if not set. Leave as null to not change the position on an existing image."
          schema:
            type: integer
            format: int32
        - name: isPrimaryImage
          in: query
          description: >-
            Specifies whether this image is the primary image on the product.
            Will not remove the image as primary image if set to false.
          schema:
            type: boolean
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The binary data for the image to be uploaded.
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: Details of the uploaded image.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-Product.Models.Read.UploadedImage
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: payload
    post:
      tags:
        - ProductImage
      summary: Add product image
      description: "Uploads a new image on a product. If an image with the same file name already exists, the image will still be uploaded but with a new unique name.  \r\nThe image is included in the body of the request as binary data."
      operationId: Add product image
      parameters:
        - name: productId
          in: path
          description: The id of the product to update.
          required: true
          schema:
            type: string
        - name: imageName
          in: path
          description: The file name of the image that is uploaded.
          required: true
          schema:
            type: string
        - name: position
          in: query
          description: >-
            The relative position of the image in the list of images for the
            product. Will default to 1 if not set.
          schema:
            type: integer
            format: int32
        - name: isPrimaryImage
          in: query
          description: >-
            Specifies whether this image is the primary image on the product.
            Will not remove the image as primary image if set to false.
          schema:
            type: boolean
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The binary data for the image to be uploaded.
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: Details of the uploaded image.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-Product.Models.Read.UploadedImage
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: payload
    delete:
      tags:
        - ProductImage
      summary: Delete product image
      description: >-
        Deletes an image on a product. Does not delete the physical image file
        from storage.
      operationId: Delete product image
      parameters:
        - name: productId
          in: path
          description: The id of the product to update.
          required: true
          schema:
            type: string
        - name: imageName
          in: path
          description: The file name of the image to delete.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      responses:
        '200':
          description: Details of the uploaded image.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/ProductParameter/{id}:
    get:
      tags:
        - ProductParameter
      summary: Get product parameter
      description: Gets a specific product parameter
      operationId: Get product parameter
      parameters:
        - name: id
          in: path
          description: The id of the product parameter to get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested product parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameter
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - ProductParameter
      summary: Update product parameter
      description: "Updates a product parameter.  \r\nLeaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data."
      operationId: Update product parameter
      parameters:
        - name: id
          in: path
          description: The id of the product parameter to update.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The product parameter data to update.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameter
        required: true
      responses:
        '200':
          description: The updated product parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameter
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameter
  /API/ProductParameter:
    post:
      tags:
        - ProductParameter
      summary: Create product parameter
      description: Creates a new product parameter.
      operationId: Create product parameter
      requestBody:
        description: The product parameter to create.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameter
        required: true
      responses:
        '200':
          description: The created product parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameter
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameter
  /API/ProductParameter/Group/{id}:
    get:
      tags:
        - ProductParameter
      summary: Get product parameter group
      description: Gets a specific product parameter group.
      operationId: Get product parameter group
      parameters:
        - name: id
          in: path
          description: The id of the product parameter group to get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested product parameter group.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameterGroup
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - ProductParameter
      summary: Update product parameter group
      description: "Updates a product parameter group.  \r\nLeaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data."
      operationId: Update product parameter group
      parameters:
        - name: id
          in: path
          description: The id of the product parameter group to update.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The product parameter group data to update.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameterGroup
        required: true
      responses:
        '200':
          description: The updated product parameter group.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameterGroup
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameterGroup
  /API/ProductParameter/Group:
    post:
      tags:
        - ProductParameter
      summary: Create product parameter group
      description: Creates a new product parameter group.
      operationId: Create product parameter group
      requestBody:
        description: The product parameter group to create.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameterGroup
        required: true
      responses:
        '200':
          description: The created product parameter group.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameterGroup
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameterGroup
  /API/ProductParameter/Value/{id}:
    get:
      tags:
        - ProductParameter
      summary: Get product parameter value
      description: Gets a specific product parameter value.
      operationId: Get product parameter value
      parameters:
        - name: id
          in: path
          description: The id of the product parameter value to get.
          required: true
          schema:
            type: integer
            format: int32
        - name: predefinedValueId
          in: query
          description: >-
            The predefined value id of the product parameter value to get. Only
            applicable for parameter type Multi.
          schema:
            type: string
      responses:
        '200':
          description: The requested product parameter group.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameterValue
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/ProductParameter/Value:
    post:
      tags:
        - ProductParameter
      summary: Create/update product parameter value
      description: Creates or updates a new product parameter value.
      operationId: Create or update product parameter value
      requestBody:
        description: The product parameter value to create or update.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameterValue
        required: true
      responses:
        '200':
          description: The updated or created product parameter value.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameterValue
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameterValue
  /API/ProductParameter/Values:
    put:
      tags:
        - ProductParameter
      summary: Update product parameter values (batch)
      description: >-
        Updates multiple product parameter values. Any existing product
        parameter values not supplied in the request will remain on the product.
      operationId: Update product parameter values (batch)
      requestBody:
        description: The product parameter values update.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameterValueBatch
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameterBatch
    post:
      tags:
        - ProductParameter
      summary: Replace product parameter values (batch)
      description: >-
        Replaces multiple product parameter values. Any existing product
        parameter values that is *not* supplied in the request will be removed
        from the product.
      operationId: Replace product parameter values (batch)
      requestBody:
        description: The product parameter values to replace.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameterValueBatch
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameterBatch
  /API/ProductParameter/PredefinedValue/{id}:
    get:
      tags:
        - ProductParameter
      summary: Get product parameter predefined value
      description: Gets a specific predefined value for a product parameter.
      operationId: Get product parameter predefined value
      parameters:
        - name: id
          in: path
          description: The id of the predefined value to get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested predefined value.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameterValue
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/ProductParameter/PredefinedValue:
    post:
      tags:
        - ProductParameter
      summary: Create product parameter predefined value
      description: Creates a new predefined value for a product parameter.
      operationId: Create product parameter predefined value
      requestBody:
        description: The predefined value to create.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ProductParameter.Models.Write.ProductParameterPredefinedValue
        required: true
      responses:
        '200':
          description: The created product parameter predefined value.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-ProductParameter.Models.Read.ProductParameterPredefinedValue
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: productParameterPredefinedValue
  /API/Order/{orderId}/Refund/{refundId}:
    get:
      tags:
        - Refund
      summary: Get refund
      operationId: Get refund
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
        - name: refundId
          in: path
          description: The refund id.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The refund with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Refund'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/{orderId}/Refund/List:
    get:
      tags:
        - Refund
      summary: List refunds
      description: Get all refunds on an order.
      operationId: List refunds
      parameters:
        - name: orderId
          in: path
          description: The Order ID.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A collection of the requested refunds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-Refund'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Refund/Query:
    post:
      tags:
        - Refund
      summary: Query refunds
      description: Queries all refunds.
      operationId: Query refunds
      requestBody:
        description: The refund query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundQuery'
        required: true
      responses:
        '200':
          description: A collection of refunds that matches the requested query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-Refund'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: refundQuery
  /API/Order/{orderId}/Refund/{refundId}/SetAsProcessed:
    post:
      tags:
        - Refund
      summary: Set refund as processed
      description: Sets a refund as processed and all refund rows within it as settled.
      operationId: Set refund as processed
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
        - name: refundId
          in: path
          description: The refund id.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Contains optional fields for the processing.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Refund.Models.Write.ProcessedRefund'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: processedRefund
  /API/Order/{orderId}/Refund/{refundId}/SetAsSettled:
    post:
      tags:
        - Refund
      summary: Set refund as settled
      description: Sets all refund rows in a refund as settled.
      operationId: Set refund as settled
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
        - name: refundId
          in: path
          description: The refund id.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Contains optional fields for the settlement.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Refund.Models.Write.SettledRefund'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: settledRefund
  /API/Order/{orderId}/Refund/{refundId}/RefundRow/{refundRowId}/SetAsSettled:
    post:
      tags:
        - Refund
      summary: Set refund row as settled
      operationId: Set refund row as settled
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
        - name: refundId
          in: path
          description: The refund id.
          required: true
          schema:
            type: string
            format: uuid
        - name: refundRowId
          in: path
          description: The refund row id.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Contains optional fields for the settlement.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Refund.Models.Write.SettledRefundRow'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: settledRefundRow
  /API/Order/{orderId}/Refund/{refundId}/RefundRow/{refundRowId}:
    delete:
      tags:
        - Refund
      summary: Delete refund row
      description: Delete a refund row. Can only be done if the refund row isn't settled.
      operationId: Delete refund row
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
        - name: refundId
          in: path
          description: The refund id.
          required: true
          schema:
            type: string
            format: uuid
        - name: refundRowId
          in: path
          description: The refund row id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/{orderId}/Refund:
    post:
      tags:
        - Refund
      summary: Creates refund
      description: Creates a new refund.
      operationId: Create refund
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Information about the refund.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Refund.Models.Write.NewRefund'
        required: true
      responses:
        '200':
          description: The id of the created refund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: newRefund
  /API/Order/{orderId}/Refund/{refundId}/SetApproval:
    post:
      tags:
        - Refund
      summary: Set refund approval
      description: Approve or deny a pending refund.
      operationId: Set refund approval
      parameters:
        - name: orderId
          in: path
          description: The Order ID.
          required: true
          schema:
            type: integer
            format: int32
        - name: refundId
          in: path
          description: The Refund ID.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Contains information about the approval.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Refund.Models.Write.RefundApproval'
        required: true
      responses:
        '200':
          description: The id of the refund.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: refundApproval
  /API/Order/{orderId}/Return/{returnId}:
    get:
      tags:
        - Return
      summary: Get return
      operationId: Get return
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
        - name: returnId
          in: path
          description: The return id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The return with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Return'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/{orderId}/Return/List:
    get:
      tags:
        - Return
      summary: List returns
      description: Get all returns on an order.
      operationId: List returns
      parameters:
        - name: orderId
          in: path
          description: The order id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A collection of the returns on the given order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-Return'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/ReturnCode/List:
    get:
      tags:
        - Return
      summary: List return codes
      description: Gets all valid return codes.
      operationId: List return codes
      responses:
        '200':
          description: A collection of all valid return codes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-ReturnCode'
      security:
        - basicAuth: []
          apiKey: []
  /API/Order/{orderId}/Return:
    post:
      tags:
        - Return
      summary: Create return
      description: Creates a new return.
      operationId: Create return
      parameters:
        - name: orderId
          in: path
          description: The Order ID.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Contains all information about a return.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Return.Models.Write.NewReturn'
        required: true
      responses:
        '200':
          description: The id of the created return.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Int'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Int'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Int'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: newReturn
  /API/Shipping/Query:
    post:
      tags:
        - Shipping
      summary: Query shipping options
      operationId: Query shipping options
      requestBody:
        description: The query to filter shipping options by.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipping.Models.ShippingQuery'
        required: true
      responses:
        '200':
          description: A collection of shipping options matching the supplied query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipping.Models.ShippingOption'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: shippingQuery
  /API/Shipping/ParcelGroup/Query:
    post:
      tags:
        - Shipping
      summary: Query parcel groups
      description: Queries parcel groups.
      operationId: Query parcel groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipping.Models.ParcelGroupQuery'
        required: true
      responses:
        '200':
          description: A collection of parcel groups matching the supplied query.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-List-Shipping.Models.Read.ParcelGroup
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: parcelGroupQuery
  /API/Shipping/ParcelGroup:
    post:
      tags:
        - Shipping
      summary: Create parcel group
      description: Creates a new parcel group.
      operationId: Create parcel group
      requestBody:
        description: Options for the new parcel group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipping.Models.ParcelGroupOptions'
        required: true
      responses:
        '200':
          description: The id of the created parcel group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Int'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: parcelGroupOptions
  /API/Shipping/ParcelGroup/{parcelGroupId}/Deliver:
    put:
      tags:
        - Shipping
      summary: Deliver parcel group
      description: Marks a parcel group as delivered. Does not signal capture events.
      operationId: Deliver parcel group
      parameters:
        - name: parcelGroupId
          in: path
          description: The id of the parcel group to deliver.
          required: true
          schema:
            type: integer
            format: int32
        - name: sendDeliveryEmail
          in: query
          description: Set to true to also send delivery email.
          schema:
            type: boolean
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Shipping/ParcelGroup/{parcelGroupId}/Capture:
    put:
      tags:
        - Shipping
      summary: Capture parcel group
      description: Creates captures for a parcel group and signals capture events for them.
      operationId: Capture parcel group
      parameters:
        - name: parcelGroupId
          in: path
          description: The id of the parcel group to capture.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Sitemap/{market}:
    get:
      tags:
        - Sitemap
      summary: Get sitemap
      operationId: Get sitemap
      parameters:
        - name: market
          in: path
          description: The market name to retrieve a sitemap for. Eg "myshop.com".
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The sitemap for the requested market.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSitemap'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
      security:
        - basicAuth: []
          apiKey: []
  /API/Supplier/{id}:
    get:
      tags:
        - Supplier
      summary: Get supplier
      description: Gets a specific supplier.
      operationId: Get supplier
      parameters:
        - name: id
          in: path
          description: The id of the supplier to get.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Supplier.Models.Read.Supplier'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Supplier
      summary: Update supplier
      description: "Updates a supplier.  \r\nLeaving out a property will ensure no changes are made to that property.  \r\nCollection properties will delete and/or add as necessary to match the supplied data."
      operationId: Update supplier
      parameters:
        - name: id
          in: path
          description: The id of the supplier to update.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The supplier data to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier.Models.Write.Supplier'
        required: true
      responses:
        '200':
          description: The updated supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Supplier.Models.Read.Supplier'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: supplier
  /API/Supplier/Query:
    post:
      tags:
        - Supplier
      summary: Query suppliers
      operationId: Query suppliers
      requestBody:
        description: The details of the query
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier.Models.SupplierQuery'
        required: true
      responses:
        '200':
          description: A collection of suppliers matching the supplied query.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier.Models.Read.Supplier'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/Supplier:
    post:
      tags:
        - Supplier
      summary: Create supplier
      description: Creates a new supplier.
      operationId: Create supplier
      requestBody:
        description: The supplier to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier.Models.Write.Supplier'
        required: true
      responses:
        '200':
          description: The created supplier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Supplier.Models.Read.Supplier'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: supplier
  /API/User/{userId}:
    get:
      tags:
        - User
      summary: Get user profile (id)
      description: Gets a specific user profile via user id.
      operationId: Get user profile (id)
      parameters:
        - name: userId
          in: path
          description: The user id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-User.Models.Read.UserProfile'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    delete:
      tags:
        - User
      summary: Delete user profile (id)
      operationId: Delete user profile (id)
      parameters:
        - name: userId
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    patch:
      tags:
        - User
      summary: Update user profile
      description: "Updates a user profile.  \r\nAny fields not specified in the request or with null value will be left unchanged."
      operationId: Update user profile
      parameters:
        - name: userId
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The user profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Models.Write.UserProfile'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: user
  /API/User/{email}:
    get:
      tags:
        - User
      summary: Get user profile (email)
      description: Gets a specific user profile via email.
      operationId: Get user profile (email)
      parameters:
        - name: email
          in: path
          description: The user email.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-User.Models.Read.UserProfile'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    delete:
      tags:
        - User
      summary: Delete user profile (email)
      operationId: Delete user profile (email)
      parameters:
        - name: email
          in: path
          description: Email address
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/User/Query/{page}:
    post:
      tags:
        - User
      summary: Query user profiles
      description: "Queries user profiles and stores the result in a batch. Results are fetched from this batch one page at a time via subsequent requests.  \r\nBatchId is mandatory when fetching any page other than the first page.  \r\nIf no BatchId is provided for the first page, a new batch is created and the id for that batch can be found in the response."
      operationId: Query user profiles
      parameters:
        - name: page
          in: path
          description: >-
            The page to fetch. Omitting the page number will return the first
            page.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details of the query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Models.UserProfileQuery'
        required: true
      responses:
        '200':
          description: >-
            A collection of user profile matching the supplied query and batch
            page.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PagedEnvelope-List-User.Models.Read.UserProfile
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: query
  /API/User:
    post:
      tags:
        - User
      summary: Create user profile
      operationId: Create user profile
      requestBody:
        description: The user profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Models.Write.UserProfile'
        required: true
      responses:
        '200':
          description: The created user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-User.Models.Read.UserProfile'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: userProfile
  /API/BalanceType/List:
    get:
      tags:
        - User
      summary: Get user balance types
      description: Gets all available balance types.
      operationId: Get user balance types
      responses:
        '200':
          description: A collection of all available balance types.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-List-User.Models.Read.BalanceType
      security:
        - basicAuth: []
          apiKey: []
  /API/User/{userId}/Balance/{currency}:
    get:
      tags:
        - User
      summary: Get user balance
      description: Gets the balance for a specific user.
      operationId: Get user balance
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested user balance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-User.Models.Read.Balance'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/User/{userId}/BalanceTransaction/List/{currency}:
    get:
      tags:
        - User
      summary: Get user balance transactions
      description: Gets all balance transactions for a specific user.
      operationId: Get user balance transactions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested user balance transactions.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Envelope-List-User.Models.Read.BalanceTransaction
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/User/{userId}/Balance:
    post:
      tags:
        - User
      summary: Add user balance
      description: Adds a balance transaction to a specific user.
      operationId: Add user balance
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Models.Write.BalanceTransaction'
        required: true
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: balanceTransaction
  /API/Variant/Labels:
    get:
      tags:
        - Variant
      summary: Get variant labels
      description: Gets all valid variant labels.
      operationId: Get variant labels
      responses:
        '200':
          description: A collection of all valid variant labels.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-System.String'
      security:
        - basicAuth: []
          apiKey: []
  /API/Variant/{productId}/VariantGroup:
    get:
      tags:
        - Variant
      summary: Get variant group (product id)
      description: Gets the variant group for the provided product id.
      operationId: Get variant group (product id)
      parameters:
        - name: productId
          in: path
          description: The id of the product, for which to get the group.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      responses:
        '200':
          description: The request variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    post:
      tags:
        - Variant
      summary: Create variant group (product)
      description: Create a new variant group for the provided product id.
      operationId: Create variant group (product)
      parameters:
        - name: productId
          in: path
          description: The id of the product for which to create the variant group.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: The settings for the new group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variant.Models.Write.VariantGroup'
        required: true
      responses:
        '200':
          description: The created variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: variantGroup
    delete:
      tags:
        - Variant
      summary: Delete variant group (product id)
      description: Deletes an entire variant group based on product id.
      operationId: Delete variant group (product id)
      parameters:
        - name: productId
          in: path
          description: The id of a product that belongs to the variant group to remove.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Variant/{productId1}/{productId2}:
    put:
      tags:
        - Variant
      summary: Add product to variant group (product)
      description: Adds a product to an existing variant group from another product.
      operationId: Add product to variant group (product)
      parameters:
        - name: productId1
          in: path
          description: The id of a product belonging to the target group.
          required: true
          schema:
            type: string
        - name: productId2
          in: path
          description: The id of the product to be added to the target group.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      responses:
        '200':
          description: The targeted variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
      security:
        - basicAuth: []
          apiKey: []
  /API/Variant/{productId}:
    put:
      tags:
        - Variant
      summary: Update variant
      description: Updates the variant details for the product with the provided id.
      operationId: Update variant
      parameters:
        - name: productId
          in: path
          description: The id of the product for which to update the variant details.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
      requestBody:
        description: The variant details.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Variant.Models.Write.Variant'
        required: true
      responses:
        '200':
          description: A collection of current variants for the targeted product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-Variant.Models.Read.Variant'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: variant
    delete:
      tags:
        - Variant
      summary: Remove product from variant group
      description: Removes a product from its variant group.
      operationId: Remove product from variant group
      parameters:
        - name: productId
          in: path
          description: The id of the product to remove from variant group.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      responses:
        '200':
          description: The targeted variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
      security:
        - basicAuth: []
          apiKey: []
  /API/VariantGroup/{groupId}:
    get:
      tags:
        - Variant
      summary: Get variant group (group id)
      description: Gets a specific variant group.
      operationId: Get variant group (group id)
      parameters:
        - name: groupId
          in: path
          description: The id of the variant group to get.
          required: true
          schema:
            type: integer
            format: int32
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      responses:
        '200':
          description: The requested variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Variant
      summary: Update variant group
      description: Updates the settings of a variant group.
      operationId: Update variant group
      parameters:
        - name: groupId
          in: path
          description: The id of the variant group to update.
          required: true
          schema:
            type: integer
            format: int32
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: The new settings for the variant group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variant.Models.Write.VariantGroup'
        required: true
      responses:
        '200':
          description: The updated variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: variantGroup
    delete:
      tags:
        - Variant
      summary: Delete variant group (group id)
      description: Deletes an entire variant group.
      operationId: Delete variant group (group id)
      parameters:
        - name: groupId
          in: path
          description: The id of the variant group to delete.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/VariantGroup:
    post:
      tags:
        - Variant
      summary: Create variant group
      description: Creates a new variant group.
      operationId: Create variant group
      parameters:
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: The settings for the new variant group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variant.Models.Write.VariantGroup'
        required: true
      responses:
        '200':
          description: The created variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: variantGroup
  /API/VariantGroup/{groupId}/{productId}:
    put:
      tags:
        - Variant
      summary: Add product to variant group
      description: Adds a product to an existing variant group.
      operationId: Add product to variant group
      parameters:
        - name: groupId
          in: path
          description: The id of the variant group to which a product should be added.
          required: true
          schema:
            type: integer
            format: int32
        - name: productId
          in: path
          description: The id of the product to be added to the target variant group.
          required: true
          schema:
            type: string
        - name: productIdType
          in: query
          description: "The type of product id supplied.  \r\n0 = Internal. Internal product id set by Geins.  \n            Eg: 10001.  \r\n1 = ArticleNumber. Article number set by customer.  \n            Eg: ABC123.  \r\n2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.  \n            Eg: SE10001.  \r\n3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.  \n            Eg: SEABC123."
          schema:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
        - name: include
          in: query
          description: "Comma separated list of product child collections to also include with the variant group.  \r\nSet to empty string to only include basic product data or null to not include any product data.  \r\nValid options:  \r\nNames, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns"
          schema:
            type: string
      requestBody:
        description: The variant details.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Variant.Models.Write.Variant'
        required: true
      responses:
        '200':
          description: The updated variant group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Variant.Models.Read.VariantGroup'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: variant
  /API/Webhook/{webhookId}:
    get:
      tags:
        - Webhook
      summary: Get webhook
      description: Retrieves a specific webhook by its unique identifier.
      operationId: Get webhook
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The webhook associated with the provided identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Geins.WebhookItem'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
    put:
      tags:
        - Webhook
      summary: Update webhook
      description: Updates the information of an existing webhook.
      operationId: Update webhook
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The updated information of the webhook.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook.Models.RestWebhook'
        required: true
      responses:
        '200':
          description: True if the update operation was successful, false otherwise.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-System.Boolean'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: webhook
    delete:
      tags:
        - Webhook
      summary: Delete webhook
      description: Deletes a specific webhook by its unique identifier.
      operationId: Delete webhook
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
  /API/Webhook:
    post:
      tags:
        - Webhook
      summary: Create webhook
      description: Creates a new webhook with the provided information.
      operationId: Create webhook
      requestBody:
        description: The information required to create a new webhook.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook.Models.RestWebhook'
        required: true
      responses:
        '200':
          description: The unique identifier of the newly created webhook.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-Nullable-Guid'
      security:
        - basicAuth: []
          apiKey: []
      x-codegen-request-body-name: webhook
  /API/Webhook/List:
    get:
      tags:
        - Webhook
      summary: List webhooks
      description: Retrieves all the webhooks in the system.
      operationId: List webhooks
      responses:
        '200':
          description: A collection of all webhooks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope-List-Geins.WebhookItem'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseEnvelope'
      security:
        - basicAuth: []
          apiKey: []
components:
  schemas:
    Envelope-List-Brand.Models.Read.Brand:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Brand.Models.Read.Brand'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Brand.Models.Read.Brand:
      type: object
      properties:
        BrandId:
          type: integer
          description: The id of the brand.
          format: int32
        Name:
          type: string
          description: The name of the brand.
        ExternalId:
          type: string
          description: External id of the brand.
        Descriptions:
          type: array
          description: The localized descriptions of the brand.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
      description: A brand.
    Shared.Models.LocalizableContent:
      type: object
      properties:
        LanguageCode:
          type: string
          description: >-
            The <a
            href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">2-letter
            ISO 639-1 language code</a> for this locale.
        Content:
          type: string
          description: The localized content.
      description: A piece of localized content.
    Envelope-Brand.Models.Read.Brand:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Brand.Models.Read.Brand'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    BaseEnvelope:
      type: object
      properties:
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: A base envelope for the result of an action.
    Brand.Models.Write.Brand:
      type: object
      properties:
        Name:
          type: string
          description: The name of the brand.
        ExternalId:
          type: string
          description: External id of the brand.
        Descriptions:
          type: array
          description: The localized descriptions of the brand.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
      description: A brand.
    Brand.Models.BrandQuery:
      type: object
      properties:
        CreatedAfter:
          type: string
          description: Limits query to brands created after the specified date.
          format: date-time
        BrandIds:
          type: array
          description: Limits query to only include the supplied brand ids.
          items:
            type: integer
            format: int32
        ExternalIds:
          type: array
          description: Limits query to externalIds
          items:
            type: string
      description: A brand query.  All fields are optional.
    Envelope-Category.Models.Read.Category:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Category.Models.Read.Category'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Category.Models.Read.Category:
      type: object
      properties:
        CategoryId:
          type: integer
          description: The id of the category.
          format: int32
        ParentCategoryId:
          type: integer
          description: The id of the parent category for the category.
          format: int32
        Names:
          type: array
          description: The localizable names of the category.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        Descriptions:
          type: array
          description: The localized descriptions of the category.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        GoogleCategoryPath:
          type: string
          description: The Google Taxonomy category path for the category, if any.
        Hidden:
          type: boolean
          description: Indicates if the category should be hidden from menus, filters etc.
        Active:
          type: boolean
          description: True if the category is active for use.
      description: An existing category.
    Category.Models.Write.Category:
      type: object
      properties:
        ParentCategoryId:
          type: integer
          description: The id of the parent category for the category.
          format: int32
        Names:
          type: array
          description: The localizable names of the category.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        Descriptions:
          type: array
          description: The localized descriptions of the category.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        Hidden:
          type: boolean
          description: Indicates if the category should be hidden from menus, filters etc.
        Active:
          type: boolean
          description: True if the category is active for use.
      description: A category to create or update.
    Category.Models.CategoryQuery:
      type: object
      properties:
        CreatedAfter:
          type: string
          description: Limits query to categories created after the specified date.
          format: date-time
        CategoryIds:
          type: array
          description: Limits query to only include the supplied category ids.
          items:
            type: integer
            format: int32
      description: A query to filter categories by. All fields are optional.
    Market.Models.Market:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
        DisplayName:
          type: string
        Currency:
          type: string
        VatRate:
          type: number
          format: double
        MarketPrefix:
          type: string
        CountryId:
          type: integer
          format: int32
        CurrencyId:
          type: integer
          format: int32
        CurrencyRate:
          type: number
          format: double
        LanguageId:
          type: integer
          format: int32
        Language:
          type: string
    Envelope-Market.Models.Market:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Market.Models.Market'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Order.Models.OrderQuery:
      type: object
      properties:
        Updated:
          type: string
          description: >-
            Given a date, only orders updated after the provided date will be
            returned.
          format: date-time
        StatusList:
          type: string
          description: "Comma separated list of statuses to filter on.  \r\nValid statuses are:  \r\ncancelled  \r\non-hold  \r\ninactive  \r\nrefunded  \r\npartial  \r\nbackorder  \r\ncompleted  \r\npending"
        MarketId:
          type: integer
          description: Id of a market.
          format: int32
        PaymentName:
          type: string
          description: Name of a payment method.
        ParcelGroupId:
          type: integer
          description: Id of a parcel group.
          format: int32
        CustomerId:
          type: integer
          description: The id of a customer.
          format: int32
        Email:
          type: string
          description: The email of a customer.
        Include:
          type: string
          description: "Comma separated list of child-collections to also include in the query result.  \r\nPossible values are:  \r\nrows  \r\npaymentdetails  \r\nshippingdetails  \r\nrefunds"
        ExternalOrderStatus:
          type: integer
          description: "This status can be used by an external system to change the status of an order, such as failed or done.  \r\nPredefined statuses are:  \r\n0 = None  \r\n10 = New  \r\n20 = Processing  \r\n30 = Failed  \r\n40 = Done"
          format: int32
        CombineProductContainerRows:
          type: boolean
          description: >-
            If true, will combine all order rows that are part of a container
            into a single container row.
        PackingLocationId:
          type: integer
          description: The packing place to get orders from.
          format: int32
      description: An order query.
    Order.Models.Order:
      type: object
      properties:
        Id:
          type: integer
          description: The id of the order.
          format: int32
        ExternalId:
          type: string
          description: The external id of the order.
        PersonalId:
          type: string
          description: The personal id or organisation number of the customer.
        CustomerId:
          type: integer
          description: The id of the customer that placed the order.
          format: int32
        CustomerTypeId:
          type: integer
          description: Customer type. Usually 1 for private customers and 2 for companies.
          format: int32
        CustomerGroupId:
          type: integer
          description: The id of the customer group that the customer belongs to, if any.
          format: int32
        CustomerGroupName:
          type: string
          description: The name of the customer group that the customer belongs to, if any.
        CreatedAt:
          type: string
          description: Date and time when the order was created.
          format: date-time
        UpdatedAt:
          type: string
          description: Date and time when the order was last updated.
          format: date-time
        CompletedAt:
          type: string
          description: >-
            The date nd time when the order was completed (eg delivered and
            paid).
          format: date-time
        Status:
          type: string
          description: "The order status.  \r\nPossbile values:  \r\ncancelled  \r\non-hold  \r\ninactive  \r\nrefunded  \r\npartial  \r\npending-payment  \r\nbackorder  \r\ncompleted  \r\npending"
        Currency:
          type: string
          description: ISO currency code.
        CurrencyRate:
          type: number
          description: The currency rate to SEK.
          format: double
        MarketId:
          type: integer
          description: The id of the market that this order originates from.
          format: int32
        MarketName:
          type: string
          description: The market name. This is usually equal to the site or channel name.
        Language:
          type: string
          description: Two-letter language code.
        OrderTotal:
          type: number
          description: Order total.
          format: double
        ExpectedSum:
          type: number
          description: "Expected total sum to be paid after discount and balance.  \r\nThe value is usually taken directly from the payment provider and represents the actual reserved amount. \r\nIf this differs from OrderTotal, actions should be taken to ensure they match. This usually happens due to rounding."
          format: double
        VATTotal:
          type: number
          description: Order VAT total.
          format: double
        OrderValueIncVat:
          type: number
          description: Order value inc vat after discount but before balance.
          format: double
        OrderValueExVat:
          type: number
          description: Order value ex vat after discount but before balance.
          format: double
        ItemValueIncVat:
          type: number
          description: Item value inc vat excluding fees and discount.
          format: double
        ItemValueExVat:
          type: number
          description: Item value ex vat excluding fees and discount.
          format: double
        Discount:
          type: number
          description: Total discount inc vat.
          format: double
        DiscountExVat:
          type: number
          description: Total discount ex vat.
          format: double
        FromBalance:
          type: number
          description: The amount which was withdrawn from the customers balance inc vat.
          format: double
        ShippingFee:
          type: number
          description: Shipping fee inc vat.
          format: double
        ShippingFeeExVat:
          type: number
          description: Shipping fee ex vat.
          format: double
        PaymentFee:
          type: number
          description: Payment fee inc vat.
          format: double
        PaymentFeeExVat:
          type: number
          description: Payment fee ex vat.
          format: double
        Message:
          type: string
          description: >-
            Order message. Can contain instructions from customer or added
            details about the order.
        OrderMessages:
          type: array
          description: >-
            Internal order messages. Can contain internal details about the
            order.
          items:
            type: string
        PaymentDetails:
          type: array
          description: List of payment details.
          items:
            $ref: '#/components/schemas/Order.Models.PaymentDetail'
        ShippingDetails:
          type: array
          description: List of shipping details.
          items:
            $ref: '#/components/schemas/Order.Models.ShippingDetail'
        ShippingAddress:
          $ref: '#/components/schemas/Order.Models.Address'
        BillingAddress:
          $ref: '#/components/schemas/Order.Models.Address'
        Rows:
          type: array
          description: List of order rows.
          items:
            $ref: '#/components/schemas/Order.Models.OrderRow'
        Refunds:
          type: array
          description: List of order refunds.
          items:
            $ref: '#/components/schemas/Order.Models.OrderRefund'
        Ip:
          type: string
          description: Customer IP-number.
        UserAgent:
          type: string
          description: Customer User Agent.
        ServiceLocation:
          type: string
          description: Chosen service location.
        CampaignCode:
          type: string
          description: Campaign code applied to the order.
        CampaignCodeId:
          type: integer
          description: The internal id of the applied campaign code.
          format: int32
        Percent:
          type: integer
          description: General percent discount applied to the order.
          format: int32
        DesiredDeliveryDate:
          type: string
          description: The desired delivery date of the order.
          format: date-time
        Gender:
          type: boolean
          description: "The gender of the customer.  \r\nTrue = male, False = female, null = unknown."
        CartId:
          type: integer
          description: The id of the cart from which this order originates.
          format: int32
        SessionId:
          type: string
          description: The session id for the from which this order originates.
        ExternalOrderStatus:
          type: integer
          description: "  \r\n0 = None  \r\n10 = New  \r\n20 = Processing  \r\n30 = Failed  \r\n40 = Done"
          format: int32
          enum:
            - 0
            - 10
            - 20
            - 30
            - 40
        CampaignIds:
          type: array
          description: The ids for the campaigns applied to this order (not rows).
          items:
            type: string
        CampaignNames:
          type: array
          description: The names of the campaigns applied to this order (not rows).
          items:
            type: string
        MetaData:
          type: object
          additionalProperties:
            type: string
          description: The order meta data to store additional information about the order.
        PublicId:
          type: string
          description: The public id of this order.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
      description: An order.
    Order.Models.PaymentDetail:
      type: object
      properties:
        Id:
          type: integer
          description: "Unique identifier for this payment detail.  \r\nException: For some payment options this field can be 0. These orders only have one payment detail."
          format: int32
        PaymentId:
          type: integer
          description: Payment method id.
          format: int32
        Name:
          type: string
          description: The name of the payment method.
        DisplayName:
          type: string
          description: The display name of the payment method.
        TransactionId:
          type: string
          description: The transaction id (external reference).
        SecondaryTransactionId:
          type: string
          description: The secondary transaction id, if any (external reference).
        ReservationNumber:
          type: string
          description: >-
            The reservation number. This field is not available for all payment
            methods.
        ReservationDate:
          type: string
          description: Reservation date.
          format: date-time
        PaymentDate:
          type: string
          description: The date all captures have been processed.
          format: date-time
        Total:
          type: number
          description: Total.
          format: double
        Payed:
          type: boolean
          description: True if all captures have been processed.
        PaymentFee:
          type: number
          description: The payment fee.
          format: double
        ShippingFee:
          type: number
          description: The shipping fee.
          format: double
        PaymentOption:
          type: string
          description: "The name of the payment option, if any.  \r\nThis doesn't have to be the same as the payment name. Eg \"Direct bank payment\", \"Card\", \"Invoice\" etc."
      description: Payment details for an order.
    Order.Models.ShippingDetail:
      type: object
      properties:
        Id:
          type: integer
          description: The id of the shipping detail.
          format: int32
        ShippingId:
          type: integer
          description: Id of the shipping method.
          format: int32
        Name:
          type: string
          description: Name of the shipping method.
        ParcelNumber:
          type: string
          description: Parcel number (tracking number).
        ShippingDate:
          type: string
          description: Shipping date.
          format: date-time
        TrackingUrl:
          type: string
          description: Tracking URL.
        ExternalDeliveryOptionId:
          type: string
          description: Delivery option id of the external shipping provider.
        ExternalServiceId:
          type: string
          description: Service id of the external shipping provider.
        ExternalCarrierId:
          type: string
          description: Carrier id of the external shipping provider.
        PickupPoint:
          type: string
          description: Pickup point.
      description: Shipping details for an order.
    Order.Models.Address:
      type: object
      properties:
        Company:
          type: string
          description: Company name.
        CareOf:
          type: string
          description: Care of. C/O.
        State:
          type: string
          description: ISO code or name of the state, province or district.
        Country:
          type: string
          description: ISO code of the country.
        FirstName:
          type: string
          description: The first part(s) of the customer name.
        LastName:
          type: string
          description: The last part(s), or family name of the customer.
        Email:
          type: string
          description: The email of the customer.
        AddressLine1:
          type: string
          description: The first line of the address, usually street and house number.
        AddressLine2:
          type: string
          description: The second line of the address.
        AddressLine3:
          type: string
          description: The third line of the address.
        Zip:
          type: string
          description: The postal / zip code.
        City:
          type: string
          description: The city.
        Phone:
          type: string
          description: The (land-line) phone number of the customer.
        Mobile:
          type: string
          description: The SMS-capable number of the customer.
        EntryCode:
          type: string
          description: The delivery address entry code, if needed for successful delivery.
      description: An address.
    Order.Models.OrderRow:
      type: object
      properties:
        Id:
          type: integer
          description: The id of this order row.
          format: int32
        ProductId:
          type: integer
          description: Product id.
          format: int32
        Name:
          type: string
          description: Order row name.
        ProductName:
          type: string
          description: Product name.
        ItemId:
          type: integer
          description: Item id (SKU).
          format: int32
        ItemName:
          type: string
          description: Item name.
        ArticleNumber:
          type: string
          description: Article number.
        Total:
          type: number
          description: Order row total (affected by quantity).
          format: double
        ExpectedTotalPriceIncVat:
          type: number
          description: "Expected total price inc vat, inc row discount.  \r\nThe value is usually taken directly from the payment provider and represents the actual paid amount."
          format: double
        DiscountRate:
          type: number
          description: "Order row discount rate.\r\nE.g. 10% = 10.0"
          format: double
        Discount:
          type: number
          description: Order row discount sum inc VAT.
          format: double
        ExpectedTotalDiscountIncVat:
          type: number
          description: "Expected total discount inc vat.  \r\nThe value is usually taken directly from the payment provider and represents the actual applied discount amount."
          format: double
        VATTotal:
          type: number
          description: Order row total VAT (affected by quantity).
          format: double
        VATRate:
          type: number
          description: "VAT rate.\r\nE.g. 25% = 0.25."
          format: double
        Quantity:
          type: integer
          description: Quantity.
          format: int32
        PurchasePrice:
          type: number
          description: Purchase price of the product.
          format: double
        PaymentDetailId:
          type: integer
          description: A reference to the payment detail that this row belongs to.
          format: int32
        ShippingDetailId:
          type: integer
          description: A reference to the shipping detail that this row belongs to.
          format: int32
        Market:
          type: string
          description: The market that the order row belongs to.
        UnitPrice:
          type: number
          description: Order row unit price inc vat, inc row discount.
          format: double
        ProductContainerBuildId:
          type: integer
          description: A reference to the product container build the row belongs to.
          format: int32
        Message:
          type: string
          description: A system message for this row.
        CartRowId:
          type: integer
          description: >-
            The unique identifier for the cart row from which this order row
            originates.
          format: int32
        ExternalId:
          type: string
          description: >-
            The identifier for the external row from which this order row
            originates.
        ProductContainerSelectionId:
          type: integer
          description: >-
            The identifier for a Product container selection id that is part of
            the product configurator module
          format: int32
        ProductContainerName:
          type: string
          description: The name of the product container.
        ExternalProductId:
          type: string
          description: External Id of the product.
        ExternalProductItemId:
          type: string
          description: External Id of the product item.
        ParcelGroupId:
          type: integer
          description: Parcel group id for a shipped order row.
          format: int32
        BrandName:
          type: string
          description: Brand name of the product.
        Gtin:
          type: string
          description: "The GTIN number for the product item.\r\nAlso known as <a href=\"http://www.gtin.info/\">EAN, UCC or UPS number</a>."
        Weight:
          type: integer
          description: The weight of the product item in grams (g).
          format: int32
        Length:
          type: integer
          description: The length of the product item in millimeters (mm).
          format: int32
        Width:
          type: integer
          description: The width of the product item in millimeters (mm).
          format: int32
        Height:
          type: integer
          description: The height of the product item in millimeters (mm).
          format: int32
        Color:
          type: string
          description: "Product color.\r\nE.g. Black."
        Variant:
          type: string
          description: "Product variant.\r\nE.g. Black XL."
        CampaignIds:
          type: array
          description: The ids for the campaigns applied to this row.
          items:
            type: string
        CampaignGroupData:
          type: string
          description: "Contains json data describing the different campaign groups belonging to this row.  \r\nFields:  \r\ni -&gt; Campaign Number (int), n -&gt; Number of items belonging to this group."
        CampaignGroupId:
          type: integer
          description: Contains the the ID of the campaign group this row belongs to.
          format: int32
        CampaignNames:
          type: array
          description: The names for the campaigns applied to this row.
          items:
            type: string
        CategoryId:
          type: integer
          description: The product category for the product on this order row.
          format: int32
        RelatedProductsBuildId:
          type: string
          description: GUID that connects orderrows that are part of a build.
        PackingLocationId:
          type: integer
          description: The packing location of this order row.
          format: int32
        ProductPriceCampaignId:
          type: integer
          description: The id of the applied product price campaign.
          format: int32
        ProductPriceListId:
          type: integer
          description: The id of the applied product price list.
          format: int32
        ProductPackageId:
          type: integer
          description: Id of the product package used for this row.
          format: int32
        ProductPackageName:
          type: string
          description: Name of the product package used for this row.
        ProductPackageGroupId:
          type: string
          description: "The unique group id for the product package used for this row.  \r\nThis separates purchases of multiple packages with the same id."
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
      description: An order row.
    Order.Models.OrderRefund:
      type: object
      properties:
        Id:
          type: integer
          description: The id of this refund.
          format: int32
        OrderRowId:
          type: integer
          description: Reference to the order row that has been refunded.
          format: int32
        PaymentDetailId:
          type: integer
          description: Reference to the payment detail that has been refunded.
          format: int32
        ReturnId:
          type: integer
          description: Id number of the return. Can be used to group refunds.
          format: int32
        ArticleNumber:
          type: string
          description: >-
            Article number. If the refund is not bound to an order row this
            field contains an optional refund article number.
        CreatedAt:
          type: string
          description: Datetime when the refund was created.
          format: date-time
        Total:
          type: number
          description: Total amount refunded.
          format: double
        ReasonCode:
          type: integer
          description: Reason code for the refund.
          format: int32
        Reason:
          type: string
          description: Reason for refund.
        ToBalance:
          type: boolean
          description: Shows if the refund was deposited to the customers balance.
        Vat:
          type: number
          description: Vat percent in decimals for the refunded amount.
          format: double
        ItemId:
          type: integer
          description: Item id (SKU).
          format: int32
        RefundType:
          type: string
          description: Refund type.
      description: A refund.
    Envelope-Int:
      type: object
      properties:
        Resource:
          type: integer
          description: The resource on which the action was taken.
          format: int32
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Order.Models.OrderUpdate:
      type: object
      properties:
        ExternalId:
          type: string
          description: The external id for the order.
        ParcelNumber:
          type: string
          description: Parcel number (tracking number).
        ExternalOrderStatus:
          type: integer
          description: "The external order status.  \r\n0 = None  \r\n10 = New  \r\n20 = Processing  \r\n30 = Failed  \r\n40 = Done"
          format: int32
          enum:
            - 0
            - 10
            - 20
            - 30
            - 40
        ReturnParcelNumber:
          type: string
          description: Parcel number (tracking number) for a return shipment.
      description: An update operation on an order.
    Order.Models.OrderStatus:
      type: object
      properties:
        Name:
          type: string
          description: Status name.
        DisplayName:
          type: string
          description: Status display name.
      description: An order status.
    Envelope-Order.Capture:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Order.Capture'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Order.Capture:
      type: object
      properties:
        CaptureId:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        OrderPaymentId:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        OrderId:
          type: integer
          format: int32
        ExternalOrderId:
          type: string
        ExternalId:
          type: string
        Reference:
          type: string
        Description:
          type: string
        ProcessedOn:
          type: string
          format: date-time
        CapturedItemTotal:
          type: number
          format: double
        CapturedShippingFee:
          type: number
          format: double
        CapturedPaymentFee:
          type: number
          format: double
        CapturedDiscount:
          type: number
          format: double
        CapturedBalance:
          type: number
          format: double
        VatRate:
          type: number
          format: double
        TrackingNumber:
          type: string
        ShippingName:
          type: string
        TrackingUri:
          type: string
        ShippingMethod:
          type: string
        PaymentName:
          type: string
        Locale:
          type: string
        Rows:
          type: array
          items:
            $ref: '#/components/schemas/Order.CaptureRow'
        OrderTransactionId:
          type: string
        SecondaryOrderTransactionId:
          type: string
    Order.CaptureRow:
      type: object
      properties:
        OrderRowId:
          type: integer
          format: int32
        ItemId:
          type: integer
          format: int32
        ProductId:
          type: integer
          format: int32
        Price:
          type: number
          format: double
        PriceExVat:
          type: number
          format: double
        Name:
          type: string
        ProductName:
          type: string
        Variant:
          type: string
        Brand:
          type: string
    Order.ProcessedCapture:
      type: object
      properties:
        CaptureId:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        ExternalId:
          type: string
        Reference:
          type: string
        ProcessedOn:
          type: string
          format: date-time
    Order.ValidateOrderCreationRequest:
      type: object
      properties:
        OrderId:
          type: integer
          format: int32
        UserId:
          type: integer
          format: int32
        Email:
          type: string
        Phone:
          type: string
        Currency:
          type: string
        SumIncVat:
          type: number
          format: double
        BalanceIncVat:
          type: number
          format: double
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Order.ValidateOrderCreationRequest.StockItem'
    Order.ValidateOrderCreationRequest.StockItem:
      type: object
      properties:
        ItemId:
          type: integer
          format: int32
        Quantity:
          type: integer
          format: int32
    Envelope-API.Order.OrderCreationValidationStatus:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/API.Order.OrderCreationValidationStatus'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    API.Order.OrderCreationValidationStatus:
      type: object
      properties:
        Success:
          type: boolean
        Message:
          type: string
    API.Order.OrderComment:
      type: object
      properties:
        OrderId:
          type: integer
          format: int32
        Comment:
          type: string
        System:
          type: boolean
    API.Order.TransactionData:
      type: object
      properties:
        OrderId:
          type: integer
          format: int32
        TransactionId:
          type: string
    Envelope-List-PageArea.Models.Read.PageAreaFamily:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/PageArea.Models.Read.PageAreaFamily'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    PageArea.Models.Read.PageAreaFamily:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
        FilterableProperties:
          type: string
          description: >-
            This page area family has access to the following properties that
            can be used for filtering, when rendering itself.
        Areas:
          type: array
          items:
            $ref: '#/components/schemas/PageArea.Models.Read.PageArea'
    PageArea.Models.Read.PageArea:
      type: object
      properties:
        Index:
          type: integer
          description: The primary id of this page are family collection
          format: int32
        Name:
          type: string
          description: >-
            A descriptive, user-defined name for this page area family
            collection
        FamilyId:
          type: integer
          description: The family this area belongs to.
          format: int32
        Settings:
          type: string
          description: >-
            The settings that determine how containers can be added to this
            area.
        Containers:
          type: array
          description: The containers in this area
          items:
            $ref: '#/components/schemas/PageArea.Models.Read.PageWidgetContainer'
      description: The API-version of the PageArea class
    PageArea.Models.Read.PageWidgetContainer:
      type: object
      properties:
        Id:
          type: integer
          description: The primary ID of this container
          format: int32
        Name:
          type: string
          description: >-
            The descriptive user defined name of this container, which is used
            to distinguish this container in a container library
        ClassNames:
          type: array
          description: The CSS class names this container should use.
          items:
            type: string
        Active:
          type: boolean
        Layout:
          type: string
        ResponsiveMode:
          type: string
        Visibility:
          type: string
        Design:
          type: string
        Widgets:
          type: array
          description: The configured widgets held by this container
          items:
            $ref: '#/components/schemas/PageArea.Models.Read.PageWidget'
      description: >-
        This class represents a collection of widgets, and defines how they
        should be layouted in the area they are rendered in.
    PageArea.Models.Read.PageWidget:
      type: object
      properties:
        Id:
          type: string
          description: The IDs of widgets are immutable.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        Name:
          type: string
          description: >-
            The static name of this widget. Used to translate into icons, or to
            append to css-classes.
        Type:
          type: string
          description: The name of the widget-type.
        Active:
          type: boolean
          description: Decides if this page widget is active or not.
        ClassNames:
          type: array
          description: Holds all CSS Class names that this widget should render.
          items:
            type: string
        Size:
          type: string
          description: The fractional size for this widget in it's container.
        Configuration:
          type: string
          description: The configuration for this page widget.
      description: The API-representation of page widgets
    Envelope-PageArea.Models.Read.PageAreaFamily:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/PageArea.Models.Read.PageAreaFamily'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Envelope-PageArea.Models.Read.PageArea:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/PageArea.Models.Read.PageArea'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    PageArea.Models.Write.PageAreaFamily:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
        FilterableProperties:
          type: array
          description: "This page area family has access to the following properties that can be used for filtering, when rendering itself.  \r\nThe following properties are available:  \r\nSiteId, LanguageId, ProductId, CategoryId, BrandId, InfoPageId, DiscountCampaignNumber, GenderId, Sale, UserTypeIdActiveFrom, ActiveTo"
          items:
            type: string
        Areas:
          type: array
          items:
            $ref: '#/components/schemas/PageArea.Models.Write.PageArea'
    PageArea.Models.Write.PageArea:
      type: object
      properties:
        Index:
          type: integer
          description: The primary id of this page are family collection
          format: int32
        Name:
          type: string
          description: >-
            A descriptive, user-defined name for this page area family
            collection
        FamilyId:
          type: integer
          description: The family this area belongs to.
          format: int32
        Settings:
          $ref: '#/components/schemas/Nullable-ValidationConfiguration'
      description: The API-version of the PageArea class
    Nullable-ValidationConfiguration:
      type: object
      properties:
        LazyLoadConfiguration:
          $ref: '#/components/schemas/PageWidget.LazyLoadSetup.LazyLoadConfiguration'
        LazyLoadCollectionConfigurations:
          type: array
          items:
            $ref: >-
              #/components/schemas/PageWidget.LazyLoadSetup.LazyLoadCollectionConfiguration
        WidgetRestrictions:
          type: object
          additionalProperties:
            $ref: >-
              #/components/schemas/WidgetRestrictionSetup.WidgetRestrictionConfiguration
        ContainerRestrictions:
          $ref: >-
            #/components/schemas/ContainerRestrictionSetup.ContainerRestrictionConfiguration
    PageWidget.LazyLoadSetup.LazyLoadConfiguration:
      type: object
      properties:
        EnableLazyloadMobile:
          type: boolean
        EagerLoadStepsMobile:
          type: integer
          format: int32
        EnableLazyloadDesktop:
          type: boolean
        EagerLoadStepsDesktop:
          type: integer
          format: int32
    PageWidget.LazyLoadSetup.LazyLoadCollectionConfiguration:
      type: object
      properties:
        CollectionName:
          type: string
        EnableLazyloadMobile:
          type: boolean
        EagerLoadStepsMobile:
          type: integer
          format: int32
        EnableLazyloadDesktop:
          type: boolean
        EagerLoadStepsDesktop:
          type: integer
          format: int32
    WidgetRestrictionSetup.WidgetRestrictionConfiguration:
      type: object
      properties:
        ForcedResponsiveMode:
          type: integer
          description: "  \r\n0 = Stack  \r\n1 = Collapse"
          format: int32
          enum:
            - 0
            - 1
        AllowedSizes:
          type: array
          items:
            type: integer
            format: int32
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
    ContainerRestrictionSetup.ContainerRestrictionConfiguration:
      type: object
      properties:
        AllowedLayouts:
          type: array
          items:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
              - 8
        BannedWidgets:
          type: array
          items:
            type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
    Payment.Models.PaymentOptionQuery:
      type: object
      properties:
        SiteId:
          type: integer
          format: int32
        Email:
          type: string
          description: Customer email address.
        CustomerTypeId:
          type: integer
          format: int32
        CountryId:
          type: integer
          format: int32
        Sum:
          type: number
          format: double
    Payment.Models.PaymentOption:
      type: object
      properties:
        PaymentId:
          type: integer
          format: int32
        PaymentGroupId:
          type: integer
          format: int32
        Name:
          type: string
        DisplayName:
          type: string
        Fee:
          type: number
          format: double
        Icon:
          type: string
        Sort:
          type: integer
          format: int32
        Period:
          type: integer
          format: int32
        TermsLink:
          type: string
        InfoLink:
          type: string
        PersonalIdRequired:
          type: boolean
        RegisteredAddressRequired:
          type: boolean
        HouseNumberRequired:
          type: boolean
        HouseExtensionShown:
          type: boolean
        GenderRequired:
          type: boolean
        BirthdateRequired:
          type: boolean
    PriceList.Models.PriceList:
      type: object
      properties:
        Id:
          type: integer
          description: Price list id.
          format: int32
        Name:
          type: string
          description: Price list name.
        MarketId:
          type: integer
          description: Market id.
          format: int32
        MarketPrefix:
          type: string
          description: "Market prefix.\r\nEg: SE."
        Currency:
          type: string
          description: "Currency abbreviation.\r\nEg: SEK."
      description: A price list definition.
    PriceList.Models.Write.PriceListPrice:
      type: object
      properties:
        PriceListId:
          type: integer
          description: "The price list id.  \r\nPrices on Campaign price lists can not be updated. Any such entries will be ignored."
          format: int32
        Price:
          type: number
          description: "The price in the currency of the associated price list.  \r\nThis value can be either inc or ex VAT, depending on configuration."
          format: double
        ProductId:
          type: string
          description: "The id of the product that this price applies to.  \r\nThis value can represent different fields, depending on configuration."
        Currency:
          type: string
          description: "The <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">3-letter ISO 4217 currency code</a> for this price.  \r\nIf ommitted the price will be updated on the default market."
        StaggeredCount:
          type: integer
          description: "Staggered count for this price. Defaults to 1.  \r\nThis field is ignored for prices on default (Ordinary, Sale and Campaign) price lists."
          format: int32
      description: A price for a product on a specific price list.
    PriceList.Models.PriceListPriceResponse:
      type: object
      properties:
        Message:
          type: string
          description: Information about the outcome of the request.
        Invalid:
          type: array
          description: Supplied PriceList prices that failed validation.
          items:
            $ref: '#/components/schemas/PriceList.Models.Write.PriceListPrice'
        NotFound:
          type: array
          description: >-
            Supplied PriceList prices that were technically valid, but couldn't
            be found.
          items:
            $ref: '#/components/schemas/PriceList.Models.Write.PriceListPrice'
        UpdateCount:
          type: integer
          description: Number of price updates resulting from the request.
          format: int32
      description: The response of a PriceListPrice request.
    Envelope-Product.Models.Read.Product:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Product.Models.Read.Product'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Product.Models.Read.Product:
      type: object
      properties:
        ProductId:
          type: integer
          description: The unique identifier for the product.
          format: int32
        ArticleNumber:
          type: string
          description: The article number of the product.
        Names:
          type: array
          description: The localized names of the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        DateCreated:
          type: string
          description: The date the product was created.
          format: date-time
        DateUpdated:
          type: string
          description: The date the product was last updated.
          format: date-time
        DateFirstAvailable:
          type: string
          description: The date the product was first available.
          format: date-time
        MaxDiscountPercentage:
          type: integer
          description: Maximum discount percentage for the product.
          format: int32
        Active:
          type: boolean
          description: The current state of the product.
        PurchasePrice:
          type: number
          description: The purchase price in the currency defined in PurchasePriceCurrency.
          format: double
        PurchasePriceCurrency:
          type: string
          description: >-
            The <a href="https://en.wikipedia.org/wiki/ISO_4217">3-letter ISO
            4217 currency code</a> for the amount given in PurchasePrice.
        ShortTexts:
          type: array
          description: Localized short texts for the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        LongTexts:
          type: array
          description: Localized long texts for the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        TechTexts:
          type: array
          description: Localized tech texts for the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        Items:
          type: array
          description: The items belonging to the product.
          items:
            $ref: '#/components/schemas/Product.Models.Read.ProductItem'
        Prices:
          type: array
          description: The current prices of the product.
          items:
            $ref: '#/components/schemas/PriceList.Models.Read.PriceListPrice'
        Categories:
          type: array
          description: The categories the product belongs to.
          items:
            $ref: '#/components/schemas/Category.Models.Read.Category'
        Images:
          type: array
          description: The images for the product
          items:
            $ref: '#/components/schemas/Product.Models.Read.Image'
        BrandId:
          type: integer
          description: The brand id of the product.
          format: int32
        BrandName:
          type: string
          description: The brand name of the product.
        SupplierId:
          type: integer
          description: The supplier id of the product.
          format: int32
        SupplierName:
          type: string
          description: The supplier name of the product.
        ParameterValues:
          type: array
          description: The parameter values associated with the product.
          items:
            $ref: >-
              #/components/schemas/ProductParameter.Models.Read.ProductParameterValue
        Variants:
          type: array
          description: The variants for this product.
          items:
            $ref: '#/components/schemas/Variant.Models.Read.Variant'
        Markets:
          type: array
          description: The markets for this product
          items:
            $ref: '#/components/schemas/Market.Models.Market'
        Vat:
          type: number
          description: The vat percent for this product. Eg) 0.25 meaning 25% VAT.
          format: double
        PrimaryImage:
          type: string
          description: The filename of this products primary image.
        FreightClassId:
          type: integer
          description: Id of freight class.
          format: int32
        IntrastatCode:
          type: string
          description: Intrastat code of the product.
        CountryOfOrigin:
          type: string
          description: Country of orgin of product.
        VariantGroupId:
          type: integer
          description: Id of Variant Group to which the product is associated.
          format: int32
        VatId:
          type: integer
          description: Id of VAT.
          format: int32
        ExternalId:
          type: string
          description: External Id of the product.
        ActivationDate:
          type: string
          description: Activation date for the product.
          format: date-time
        Feeds:
          type: array
          description: The feeds the product is a member of.
          items:
            $ref: '#/components/schemas/Product.Models.Read.FeedMembership'
        Urls:
          type: array
          description: All canonical urls for the product.
          items:
            $ref: '#/components/schemas/Product.Models.Read.ProductUrl'
        MainCategoryId:
          type: integer
          description: The main category id for the product.
          format: int32
        RelatedProducts:
          type: array
          description: The related products for the product.
          items:
            $ref: '#/components/schemas/Product.Models.Read.RelatedProduct'
        DiscountCampaigns:
          type: array
          description: The discount campaigns for the product.
          items:
            $ref: '#/components/schemas/Product.Models.Read.DiscountCampaign'
      description: A product.
    Product.Models.Read.ProductItem:
      type: object
      properties:
        ItemId:
          type: integer
          description: The product item id.
          format: int32
        ArticleNumber:
          type: string
          description: The article number for the product item.
        ProductId:
          type: integer
          description: The id of the product that the item belongs to.
          format: int32
        Name:
          type: string
          description: The name of the product item.
        Shelf:
          type: string
          description: The shelf name where the product item can be found.
        Weight:
          type: integer
          description: The weight of the item in grams (g).
          format: int32
        Length:
          type: integer
          description: The length of the item in millimeters (mm).
          format: int32
        Width:
          type: integer
          description: The width of the item in millimeters (mm).
          format: int32
        Height:
          type: integer
          description: The height of the item in millimeters (mm).
          format: int32
        Gtin:
          type: string
          description: "The <a href=\"http://www.gtin.info/\">GTIN number</a> for the item.  \r\nAlso known as EAN, UCC or UPS number."
        DateCreated:
          type: string
          description: The date the item was created.
          format: date-time
        DateUpdated:
          type: string
          description: The date the item was last updated.
          format: date-time
        DateIncoming:
          type: string
          description: The date the item will be in stock again.
          format: date-time
        Active:
          type: boolean
          description: The current state of the item.
        ExternalId:
          type: string
          description: External Id of the product item.
        Stock:
          $ref: '#/components/schemas/Product.Models.Read.ProductItemStock'
        ShippingFees:
          type: array
          description: >-
            The lowest shipping fees for each market and country for the product
            item.
          items:
            $ref: '#/components/schemas/Product.Models.Read.ShippingFee'
      description: A product item belonging to a product.
    PriceList.Models.Read.PriceListPrice:
      type: object
      properties:
        ProductId:
          type: integer
          description: The id of the product that this price applies to.
          format: int32
        PriceListId:
          type: integer
          description: The id of the price list that this price is associated with.
          format: int32
        PriceListName:
          type: string
          description: The name of the price list that this price is associated with.
        PriceIncVat:
          type: number
          description: The price, inc VAT, in the currency of the associated price list.
          format: double
        PriceExVat:
          type: number
          description: The price, ex VAT, in the currency of the associated price list.
          format: double
        VatRate:
          type: number
          description: The VAT Rate.
          format: double
        Country:
          type: string
          description: The 2-letter ISO country code for this price.
        Currency:
          type: string
          description: >-
            The <a href="https://en.wikipedia.org/wiki/ISO_4217">3-letter ISO
            4217 currency code</a> for this price.
        StaggeredCount:
          type: integer
          description: "Staggered count for this price. Defaults to 1.  \r\nThis field is ignored for prices on default (Ordinary, Sale and Campaign) price lists."
          format: int32
        ValidFrom:
          type: string
          description: "The date the price is valid from.  \r\nNo start boundary if null."
          format: date-time
        ValidTo:
          type: string
          description: "The date the price is valid to.  \r\nNo end boundary if null."
          format: date-time
      description: A price for a product on a specific price list.
    Product.Models.Read.Image:
      type: object
      properties:
        ProductId:
          type: integer
          format: int32
        Url:
          type: string
          description: Url of Image.
        Order:
          type: integer
          description: >-
            Order of image (ascending). First image is the main image for the
            product.
          format: int32
        Tags:
          type: array
          description: The tags associated with this image.
          items:
            type: string
    ProductParameter.Models.Read.ProductParameterValue:
      type: object
      properties:
        ParameterValueId:
          type: integer
          description: The unique identifier of this parameter value.
          format: int32
        ProductId:
          type: integer
          description: The product id of the parameter.
          format: int32
        ParameterId:
          type: integer
          description: The unique identifier of the parameter that this value belongs to.
          format: int32
        ParameterName:
          type: string
          description: The non-localized name of the parameter.
        GroupId:
          type: integer
          description: The unique identifier of the group that this parameter belongs to.
          format: int32
        GroupName:
          type: string
          description: The name of the group that this parameter belongs to.
        ParameterType:
          type: integer
          description: "The type of parameter.  \r\nThe Value field must validate against this type.  \r\n1 = String. Any string value.  \r\n2 = Float. Any floating point number.  \n            Period as decimal separator and no thousands separator.  \n            Eg: 10001.789.  \r\n3 = DateTime. Any ISO 8601 date.  \n            Eg: 2017-03-06T16:31:24+02:00.  \r\n4 = Multi. A string value from a predefined set of values.  \n            This type may occur multiple times for the same parameter.  \r\n5 = Single. A string value from a predefined set of values.  \r\n6 = Headline. A string value used mainly for grouping in layout.  \r\n7 = Tags. A pipe-separated list of product specific values.  \n            Eg: red|green|blue."
          format: int32
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
        Value:
          type: string
          description: "The identifying value of the parameter.  \r\nAlthough always presented as a string, the data within Value must validate against the type of the parameter:  \r\nString = Any string.  \r\nFloat = Any floating point number.  \r\nDateTime = Any date.  \r\nMulti = Any predefined value id from the predefined set of values for this parameter.  \r\nSingle = Any predefined value id from the predefined set of values for this parameter.  \r\nHeadline = Any string."
        Description:
          type: string
          description: "The non-localized description of the parameter.  \r\nThis is usually the same value as Value for all parameter types, except Single Multi."
        LocalizedDescriptions:
          type: array
          description: "The localized descriptions of the parameter.  \r\nNot used for parameter types Float or DateTime."
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        InternalIdentifier:
          type: string
          description: The internal identifier of the parameter.
      description: A parameter value for a product.
    Variant.Models.Read.Variant:
      type: object
      properties:
        ProductId:
          type: integer
          description: The id of the product this variant information belongs to.
          format: int32
        GroupId:
          type: integer
          description: The id of the group this variant belongs to.
          format: int32
        Label:
          type: string
          description: The name of the variant information, eg "Weight", "Length" etc.
        Value:
          type: string
          description: The value of the variant information, eg "250g", "89cm" etc.
      description: A variant of a product.
    Product.Models.Read.FeedMembership:
      type: object
      properties:
        FeedId:
          type: integer
          description: The feed id.
          format: int32
        AllowSale:
          type: boolean
          description: >-
            True if the feed is allowed to display the sale price of the
            product.
      description: A product feed membership.
    Product.Models.Read.ProductUrl:
      type: object
      properties:
        Url:
          type: string
          description: The canonical url to the product.
        Market:
          type: integer
          description: The market of the url.
          format: int32
        Countries:
          type: array
          description: The countries or regions of the url.
          items:
            type: string
        Language:
          type: string
          description: The language code of the url.
      description: A canonical product url for a specific market and language.
    Product.Models.Read.RelatedProduct:
      type: object
      properties:
        ProductId:
          type: integer
          description: The unique identifier for the product.
          format: int32
        RelatedProductId:
          type: integer
          description: The unique identifier for the related product.
          format: int32
        RelationTypeId:
          type: integer
          description: The product relation type id.
          format: int32
      description: A related product.
    Product.Models.Read.DiscountCampaign:
      type: object
      properties:
        CampaignId:
          type: string
          description: Id of Campaign.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        CampaignName:
          type: string
          description: Name of Campaign.
        Title:
          type: string
          description: Title that can be displayed for the product.
        HideTitle:
          type: boolean
          description: Indicates if the title should be displayed.
        RuleType:
          type: string
          description: Type of discount rule. I.e. Percentage.
        Category:
          type: string
          description: Campaign Category. Cart, PromoCode or Product.
        Enabled:
          type: boolean
          description: true if campaign is enabled.
        ValidFrom:
          type: string
          description: Valid from.
          format: date-time
        ValidTo:
          type: string
          description: Valid to.
          format: date-time
        Markets:
          type: string
          description: >-
            List of markets where the campaign is available in fthe format
            {domain|marketId}.
    Product.Models.Read.ProductItemStock:
      type: object
      properties:
        ItemId:
          type: integer
          description: A value to uniquely identity a single product item.
          format: int32
        Stock:
          type: integer
          description: The physical stock value.
          format: int32
        StockOversellable:
          type: integer
          description: The oversellable stock value.
          format: int32
        StockStatic:
          type: integer
          description: The static stock value.
          format: int32
        StockSellable:
          type: integer
          description: The sellable stock value.
          format: int32
      description: A stock value for a product item
    Product.Models.Read.ShippingFee:
      type: object
      properties:
        Market:
          type: integer
          description: The market that the shipping fee is applicable on.
          format: int32
        Country:
          type: string
          description: The country that the shipping fee is applicable in.
        Service:
          type: string
          description: The shipping service with the current fee.
        ServiceId:
          type: integer
          description: The shipping service id with the current fee.
          format: int32
        Fee:
          type: number
          description: The shipping fee.
          format: double
      description: A shipping fee for a product item.
    Product.Models.Write.Product:
      type: object
      properties:
        ArticleNumber:
          type: string
          description: The article number of the product.
        Names:
          type: array
          description: The localized names of the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        Active:
          type: boolean
          description: The current state of the product.
        PurchasePrice:
          type: number
          description: The purchase price in the currency defined in PurchasePriceCurrency.
          format: double
        PurchasePriceCurrency:
          type: string
          description: >-
            The <a href="https://en.wikipedia.org/wiki/ISO_4217">3-letter ISO
            4217 currency code</a> for the amount given in PurchasePrice.
        ShortTexts:
          type: array
          description: Localized short texts for the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        LongTexts:
          type: array
          description: Localized long texts for the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        TechTexts:
          type: array
          description: Localized tech texts for the product.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        BrandId:
          type: integer
          description: The brand of the product.
          format: int32
        MaxDiscountPercentage:
          type: integer
          description: Maximum discount percentage for the product.
          format: int32
        SupplierId:
          type: integer
          description: The supplier id of the product.
          format: int32
        Items:
          type: array
          description: "The items belonging to the product.\r\nOnly valid for product creation."
          items:
            $ref: '#/components/schemas/Product.Models.Write.ProductItem'
        CategoryIds:
          type: array
          description: The category ids the product belongs to.
          items:
            type: integer
            format: int32
        ParameterValues:
          type: array
          description: "The parameter values associated with the product.  \r\nOnly valid for product creation."
          items:
            $ref: >-
              #/components/schemas/ProductParameter.Models.Write.ProductParameterValue
        Variants:
          type: array
          description: The variants for this product.
          items:
            $ref: '#/components/schemas/Variant.Models.Write.Variant'
        Markets:
          type: array
          description: The markets for this product.
          items:
            $ref: '#/components/schemas/Market.Models.Market'
        FreightClassId:
          type: integer
          description: Id of freight class.
          format: int32
        IntrastatCode:
          type: string
          description: Intrastat code of the product.
        CountryOfOrigin:
          type: string
          description: Country of orgin of product.
        VariantGroupId:
          type: integer
          description: Id of Variant Group to whom the product should be associated.
          format: int32
        Vat:
          type: integer
          description: >-
            ID or rate of VAT (On create and if no VAT is provided then default
            VAT will be used).
          format: int32
        VatType:
          type: string
          description: "Defines how VAT parameter should be interpreted.  \r\nActual = VAT parameter is interpreted as VAT rate.  \r\nVatId = VAT parameter is interpreted as VAT Id."
        ExternalId:
          type: string
          description: External id of the product.
        ActivationDate:
          type: string
          description: Activation date for the product.
          format: date-time
      description: A product.
    Product.Models.Write.ProductItem:
      type: object
      properties:
        ItemId:
          type: integer
          description: Id of the product item.
          format: int32
        ArticleNumber:
          type: string
          description: The article number for the product item.
        Name:
          type: string
          description: The name of the product item.
        Shelf:
          type: string
          description: The shelf name where the product item can be found.
        Weight:
          type: integer
          description: The weight of the item in grams (g).
          format: int32
        Length:
          type: integer
          description: The length of the item in millimeters (mm).
          format: int32
        Width:
          type: integer
          description: The width of the item in millimeters (mm).
          format: int32
        Height:
          type: integer
          description: The height of the item in millimeters (mm).
          format: int32
        Gtin:
          type: string
          description: "The <a href=\"http://www.gtin.info/\">GTIN number</a> for the item.  \r\nAlso known as EAN, UCC or UPS number."
        Active:
          type: boolean
          description: The current state of the item.
        ExternalId:
          type: string
          description: External Id of the product item.
        DateIncoming:
          type: string
          description: The date the item will be in stock again.
          format: date-time
      description: A product item belonging to a product.
    ProductParameter.Models.Write.ProductParameterValue:
      type: object
      properties:
        ProductId:
          type: integer
          description: "The product id of the parameter.  \r\nThis value can be omitted if the value is part of a product request."
          format: int32
        ParameterId:
          type: integer
          description: The unique identifier of the parameter that this value belongs to.
          format: int32
        Value:
          type: string
          description: "The identifying value of the parameter.  \r\nAlthough always presented as a string, the data within Value must validate against the ProductParameterType of the parameter:  \r\nString = Any string.  \r\nFloat = Any floating point number.  \r\nDateTime = Any date.  \r\nMulti = Any predefined value id from the predefined set of values for this parameter.  \r\nSingle = Any predefined value id from the predefined set of values for this parameter.  \r\nHeadline = Any string.  \r\nTags = Any string, as part of a pipe-separated list. A string containing the pipe (|) character is not allowed."
        LocalizedDescriptions:
          type: array
          description: "The localized descriptions of the parameter.  \r\nOnly used for parameter types String or Headline.  \r\nFor Multi and Single, use LocalizedNames."
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
      description: A parameter value for a product.
    Variant.Models.Write.Variant:
      type: object
      properties:
        Label:
          type: string
          description: The name of the variant, eg "Color", "Weight" etc.
        Value:
          type: string
          description: The value of this variant, eg "Blue", "250g" etc.
      description: A variant of a product.
    Product.Models.ProductQuery:
      type: object
      properties:
        UpdatedAfter:
          type: string
          description: Limits query to products updated after the specified date.
          format: date-time
        CreatedAfter:
          type: string
          description: Limits query to products created after the specified date.
          format: date-time
        CreatedBefore:
          type: string
          description: Limits query to products created before the specified date.
          format: date-time
        ProductIds:
          type: array
          description: Limits query to only include the supplied product ids.
          items:
            type: integer
            format: int32
        CategoryIds:
          type: array
          description: >-
            Limits query to only include products assigned to the supplied
            category ids.
          items:
            type: integer
            format: int32
        BrandIds:
          type: array
          description: >-
            Limits query to only include products assigned to the supplied brand
            ids.
          items:
            type: integer
            format: int32
        SupplierIds:
          type: array
          description: >-
            Limits query to only include products assigned to the supplied
            supplier ids.
          items:
            type: integer
            format: int32
        ArticleNumbers:
          type: array
          description: Limits query to only include products with supplied article numbers.
          items:
            type: string
        OnlySellable:
          type: boolean
          description: >-
            Limits query to only include products that are available for
            purchase.
        FeedId:
          type: integer
          description: >-
            Limits query to only include products contained in the specified
            feed.
          format: int32
        BatchId:
          type: string
          description: Used to fetch products where the result set is split into batches.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
      description: "A product query.  \r\nAll fields are optional."
    PagedEnvelope-List-Product.Models.Read.Product:
      type: object
      properties:
        PageResult:
          $ref: '#/components/schemas/PageResult'
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Product.Models.Read.Product'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
    PageResult:
      type: object
      properties:
        BatchId:
          type: string
          description: >-
            The id of the batch operation. If this property has a value for the
            first fetched page it has to be passed as a parameter for all
            subsequent requests.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        Page:
          type: integer
          description: The current page
          format: int32
        RowCount:
          type: integer
          description: Total number of rows
          format: int32
        PageCount:
          type: integer
          description: Total number of pages
          format: int32
        PageSize:
          type: integer
          description: Page size
          format: int32
        HasMoreRows:
          type: boolean
          description: True if there is more content to fetch.
      description: >-
        Contains pagination information for paged operations, i.e. PageSize and
        PageCount.
    Product.Models.ProductCategory:
      type: object
      properties:
        CategoryId:
          type: integer
          description: The id of the category.
          format: int32
    Product.Models.MonitorSku:
      type: object
      properties:
        SiteId:
          type: integer
          format: int32
        LanguageCode:
          type: string
        Email:
          type: string
        SkuId:
          type: integer
          format: int32
    Product.ProductItemEnvelope:
      type: object
      properties:
        Message:
          type: string
          description: A status message for the action taken.
          readOnly: true
        Item:
          $ref: '#/components/schemas/Product.Models.Read.ProductItem'
      description: An envelope for the result of and action taken on a product item.
    Envelope-Product.Models.Read.ProductItem:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Product.Models.Read.ProductItem'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Envelope-Product.Models.Read.ProductItemResult:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Product.Models.Read.ProductItemResult'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Product.Models.Read.ProductItemResult:
      type: object
      properties:
        UpdateCount:
          type: integer
          format: int32
    Envelope-List-Product.Models.Read.ProductItem:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Product.Models.Read.ProductItem'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Product.Models.Write.ProductItemStock:
      type: object
      properties:
        Id:
          type: string
          description: "A value to uniquely identity a single product item.  \r\nThis value can represent different fields, depending on configuration."
        Stock:
          type: integer
          description: The stock value.
          format: int32
        StockSellable:
          type: integer
          description: "The sellable stock value.  \r\nThis value is read only."
          format: int32
        StockType:
          type: integer
          description: "The type of stock to be updated.  \r\n0 = Available. Sets the actual count of items in warehouse.  \r\n1 = Oversellable. Sets the count for items that are available for purchase but not in physical stock.  \r\n2 = Static. Sets the count for items that have a static count that is always available (eg. digital gift cards).  \n            When set, the stock count should be considered the max amount a customer can put in cart for the current item."
          format: int32
          enum:
            - 0
            - 1
            - 2
      description: A stock value for a product item.
    Product.Models.StockEnvelope:
      type: object
      properties:
        Message:
          type: string
          description: Information about the outcome of the request.
        Invalid:
          type: array
          description: Supplied productItemStocks that failed validation.
          items:
            $ref: '#/components/schemas/Product.Models.Write.ProductItemStock'
        NotFound:
          type: array
          description: >-
            Supplied productItemStocks that were technically valid, but couldn't
            be found.
          items:
            $ref: '#/components/schemas/Product.Models.Write.ProductItemStock'
        UpdateCount:
          type: integer
          description: Number of stock updates resulting from the request.
          format: int32
      description: The response of a Stock request.
    Envelope-List-Product.Models.Read.ProductItemStock:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Product.Models.Read.ProductItemStock'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Envelope-List-Product.Models.Read.Feed:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Product.Models.Read.Feed'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Product.Models.Read.Feed:
      type: object
      properties:
        FeedId:
          type: integer
          description: The feed id.
          format: int32
        Name:
          type: string
          description: The feed name.
        Url:
          type: string
          description: The url to the feed.
        Layout:
          type: string
          description: The name of the feed layout.
        Market:
          type: integer
          description: The market of the feed.
          format: int32
        Language:
          type: string
          description: The language code of the feed.
        DefaultCurrency:
          type: string
          description: The default currency for the market.
        DefaultCountry:
          type: string
          description: The default country for the market.
      description: A product feed.
    Envelope-List-Product.Models.Read.RelationType:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Product.Models.Read.RelationType'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Product.Models.Read.RelationType:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
        Order:
          type: integer
          format: int32
    Product.Models.Write.RelatedProduct:
      type: object
      properties:
        RelatedProductId:
          type: string
          description: The unique identifier for the related product.
        RelationTypeId:
          type: integer
          description: The product relation type id.
          format: int32
      description: A related product.
    Product.Models.RelatedProductEnvelope:
      type: object
      properties:
        Message:
          type: string
          description: Information about the outcome of the request.
        Invalid:
          type: array
          description: Supplied relatedProducts that failed validation.
          items:
            $ref: '#/components/schemas/Product.Models.Write.RelatedProduct'
        NotFound:
          type: array
          description: >-
            Supplied relatedProducts that were technically valid, but couldn't
            be found.
          items:
            $ref: '#/components/schemas/Product.Models.Write.RelatedProduct'
        UpdateCount:
          type: integer
          description: Number of related product updates resulting from the request.
          format: int32
      description: The response of a related products request.
    Envelope-Product.Models.Read.UploadedImage:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Product.Models.Read.UploadedImage'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Product.Models.Read.UploadedImage:
      type: object
      properties:
        FileName:
          type: string
    Envelope-ProductParameter.Models.Read.ProductParameter:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/ProductParameter.Models.Read.ProductParameter'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    ProductParameter.Models.Read.ProductParameter:
      type: object
      properties:
        ParameterId:
          type: integer
          description: The unique identifier for the parameter.
          format: int32
        GroupId:
          type: integer
          description: The unique identifier of the group that this parameter belongs to.
          format: int32
        GroupName:
          type: string
          description: The name of the group that this parameter belongs to.
        ParameterType:
          type: integer
          description: "The type of parameter.  \r\n1 = String. Any string value.  \r\n2 = Float. Any floating point number.  \n            Period as decimal separator and no thousands separator.  \n            Eg: 10001.789.  \r\n3 = DateTime. Any ISO 8601 date.  \n            Eg: 2017-03-06T16:31:24+02:00.  \r\n4 = Multi. A string value from a predefined set of values.  \n            This type may occur multiple times for the same parameter.  \r\n5 = Single. A string value from a predefined set of values.  \r\n6 = Headline. A string value used mainly for grouping in layout.  \r\n7 = Tags. A pipe-separated list of product specific values.  \n            Eg: red|green|blue."
          format: int32
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
        Name:
          type: string
          description: The non-localized name of the parameter.
      description: An existing product parameter.
    ProductParameter.Models.Write.ProductParameter:
      type: object
      properties:
        ParameterId:
          type: integer
          description: The unique identifier for the parameter.
          format: int32
        GroupId:
          type: integer
          description: The unique identifier of the group that this parameter belongs to.
          format: int32
        ParameterType:
          type: integer
          description: "The type of parameter.  \r\n1 = String. Any string value.  \r\n2 = Float. Any floating point number.  \n            Period as decimal separator and no thousands separator.  \n            Eg: 10001.789.  \r\n3 = DateTime. Any ISO 8601 date.  \n            Eg: 2017-03-06T16:31:24+02:00.  \r\n4 = Multi. A string value from a predefined set of values.  \n            This type may occur multiple times for the same parameter.  \r\n5 = Single. A string value from a predefined set of values.  \r\n6 = Headline. A string value used mainly for grouping in layout.  \r\n7 = Tags. A pipe-separated list of product specific values.  \n            Eg: red|green|blue."
          format: int32
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
        Name:
          type: string
          description: The non-localized name of the parameter.
        LocalizedNames:
          type: array
          description: The localized names of the parameter.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
      description: A product parameter to create or update.
    Envelope-ProductParameter.Models.Read.ProductParameterGroup:
      type: object
      properties:
        Resource:
          $ref: >-
            #/components/schemas/ProductParameter.Models.Read.ProductParameterGroup
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    ProductParameter.Models.Read.ProductParameterGroup:
      type: object
      properties:
        GroupId:
          type: integer
          description: The unique identifier for the groups.
          format: int32
        Name:
          type: string
          description: "The non-localized name of the group.\r\nThis name is required, but will be overriden by LocalizedNames for any matching locales."
        LocalizedNames:
          type: array
          description: "The localized names of the group.\r\nThese names are optional, and will override Name for matching locales."
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        ParameterIds:
          type: array
          description: The ids of the parameters belonging to this group.
          items:
            type: integer
            format: int32
      description: An existing product parameter group.
    ProductParameter.Models.Write.ProductParameterGroup:
      type: object
      properties:
        Name:
          type: string
          description: The non-localized name of the group.
        LocalizedNames:
          type: array
          description: The localized names of the group.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
        ParameterIds:
          type: array
          description: The ids of the parameters belonging to this group.
          items:
            type: integer
            format: int32
      description: A product parameter group to create or update.
    Envelope-ProductParameter.Models.Read.ProductParameterValue:
      type: object
      properties:
        Resource:
          $ref: >-
            #/components/schemas/ProductParameter.Models.Read.ProductParameterValue
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    ProductParameter.Models.Write.ProductParameterValueBatch:
      type: object
      properties:
        productParameterValues:
          type: array
          items:
            $ref: >-
              #/components/schemas/ProductParameter.Models.Write.ProductParameterValue
    ProductParameter.Models.Write.ProductParameterPredefinedValue:
      type: object
      properties:
        ParameterId:
          type: integer
          description: The unique identifier for the parameter.
          format: int32
        PredefinedValueId:
          type: integer
          description: The predefined value id of the parameter.
          format: int32
        Name:
          type: string
          description: The non-localized predefined value name of the parameter.
        LocalizedNames:
          type: array
          description: The localized predefined value names of the parameter.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
      description: "A predefined value for a product parameter.  \r\nThe value defined here is used for parameters of type Single and Multi."
    Envelope-ProductParameter.Models.Read.ProductParameterPredefinedValue:
      type: object
      properties:
        Resource:
          $ref: >-
            #/components/schemas/ProductParameter.Models.Read.ProductParameterPredefinedValue
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    ProductParameter.Models.Read.ProductParameterPredefinedValue:
      type: object
      properties:
        ParameterId:
          type: integer
          description: The unique identifier for the parameter.
          format: int32
        PredefinedValueId:
          type: integer
          description: "The predefined value id of the parameter.  \r\nThis value is used in ProductParameterValue.Value."
          format: int32
        Name:
          type: string
          description: The non-localized predefined value name of the parameter.
        LocalizedNames:
          type: array
          description: The localized predefined value names of the parameter.
          items:
            $ref: '#/components/schemas/Shared.Models.LocalizableContent'
      description: "A predefined value for a product parameter.  \r\nThe value defined here is used for parameters of type Single and Multi."
    Envelope-Refund:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Refund'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Refund:
      type: object
      properties:
        RefundId:
          type: string
          description: The id of the refund.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        RefundInstanceId:
          type: integer
          description: The internal id of the refund.
          format: int32
        OrderId:
          type: integer
          description: The order id of the order that the refund belongs to.
          format: int32
        Reference:
          type: string
          description: A custom refund reference.
        Description:
          type: string
          description: A custom refund description.
        Author:
          type: string
          description: The name of the author of the refund.
        ExternalOrderId:
          type: string
          description: The external order id of the order.
        OrderTransactionId:
          type: string
          description: A transaction id of the order.
        SecondaryOrderTransactionId:
          type: string
          description: An secondary transaction id of the order.
        ExternalId:
          type: string
          description: An external transaction id of the order.
        PaymentName:
          type: string
          description: The name of the payment used in the order.
        Locale:
          type: string
          description: The locale of the order.
        SiteName:
          type: string
          description: The market the order was placed on.
        Customer:
          type: string
          description: The customer name.
        OrderSum:
          type: number
          description: The sum of the order.
          format: double
        OrderVat:
          type: number
          description: The total vat of the order.
          format: double
        OrderValue:
          type: number
          description: The total value of the order rows.
          format: double
        OrderDiscount:
          type: number
          description: THe total discount on the order.
          format: double
        ShippingFee:
          type: number
          description: The order shipping fee.
          format: double
        PaymentFee:
          type: number
          description: The order payment fee.
          format: double
        Currency:
          type: string
          description: The code of the currency used for the refund.
        CreatedOn:
          type: string
          description: The date the refund was created.
          format: date-time
        SentOn:
          type: string
          description: The date the refund was marked as sent.
          format: date-time
        ProcessedOn:
          type: string
          description: The date the refund was marked as processed.
          format: date-time
        Sent:
          type: boolean
          description: If true, the refund has been marked as sent.
          readOnly: true
        Processed:
          type: boolean
          description: If true, the refund has been marked as processed.
          readOnly: true
        RequiresApproval:
          type: boolean
          description: >-
            True if this refund requires approval before being sent, processed
            or settled.
        Approved:
          type: boolean
          description: >-
            Null if undecided, true if approved and false if denied. Only
            applicable if RequiresApproval is true.
        ApprovalDecidedBy:
          type: string
          description: The name of the one that approved or denied the refund.
        ApprovalDecidedOn:
          type: string
          description: The date that the refund was approved or denied.
          format: date-time
        VatRate:
          type: number
          description: Vat rate. E.g. 0.25 for 25%, 0.12 for 12%.
          format: double
          readOnly: true
        SkipRefundEvents:
          type: boolean
          description: Whether or not refund events will be sent for this refund.
        RefundedItemTotal:
          type: number
          description: The total amount refunded from order rows.
          format: double
        RefundedShippingFee:
          type: number
          description: The amount refunded from the shipping fee.
          format: double
        OrderStatus:
          type: string
          description: The status of the order that the refund belongs to.
        RefundedPaymentFee:
          type: number
          description: The amount refunded from the payment fee.
          format: double
        RefundedDiscount:
          type: number
          description: >-
            The amount refunded from the discount (can be split over several
            refunds).
          format: double
        Shipped:
          type: boolean
          description: The shipping status of the order that the refund belongs to.
        RefundedBalance:
          type: number
          description: >-
            The amount refunded from the balance (can be split over several
            refunds).
          format: double
        RefundedTotal:
          type: number
          description: Total amount refunded.
          format: double
          readOnly: true
        RefundRows:
          type: array
          description: List of refund rows belonging to this refund.
          items:
            $ref: '#/components/schemas/RefundRow'
        Rows:
          type: array
          description: List of order rows belonging to this refund.
          items:
            $ref: '#/components/schemas/Refund.Core.Models.Order.OrderRow'
      description: A refund.
    RefundRow:
      type: object
      properties:
        OrderId:
          type: integer
          description: ''
          format: int32
        RefundRowId:
          type: integer
          description: ''
          format: int32
        OrderRowId:
          type: integer
          description: The order row id that this refund row belongs to, if any.
          format: int32
        RefundAmount:
          type: number
          description: >-
            The refund amount. This can be different than the corresponding
            order row value.
          format: double
        ToBalance:
          type: boolean
          description: >-
            If true, the refund amount of this refund row is added to the
            customer's balance.
        Settled:
          type: boolean
          description: If true, the refund row is marked as settled.
        SettledOn:
          type: string
          description: The date when the refund row was marked as settled.
          format: date-time
        CreatedOn:
          type: string
          description: The date the refund row was created.
          format: date-time
        Investigation:
          type: boolean
          description: If true, the refund row is marked for investigation.
        RefundType:
          type: integer
          description: "The kind of source transaction the refund is derived from.\r\n0 = Default. A regular refund of the order or order row.\r\n1 = InstanceCost. Return cost type, used in drawing cost for instance.\r\n2 = Shipping. Refund shipping type, used to refund shipping.\r\n3 = InvoiceFee. Refund invoice fee.  \r\n0 = Default. A regular refund of the order or order row.  \r\n1 = InstanceCost. Return cost type, used in drawing cost for instance.  \r\n2 = Shipping. Refund shipping type, used to refund shipping.  \r\n3 = InvoiceFee. Refund invoice fee."
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
      description: A refund row.
    Refund.Core.Models.Order.OrderRow:
      type: object
      properties:
        OrderRowId:
          type: integer
          description: The id of the order row.
          format: int32
        ItemId:
          type: integer
          description: The SKU.
          format: int32
        ProductId:
          type: integer
          description: The product id.
          format: int32
        Price:
          type: number
          description: The price of the order row, inc vat.
          format: double
        PriceExVat:
          type: number
          description: The price of the order row, ex vat.
          format: double
        Name:
          type: string
          description: The name of the order row.
        ProductName:
          type: string
          description: The name of the product.
        Variant:
          type: string
          description: The name of the variant.
        Brand:
          type: string
          description: The name of the product brand.
        PrimaryImage:
          type: string
          description: The primary image of the product.
        ArticleNumber:
          type: string
          description: The article number.
        Shelf:
          type: string
          description: The shelf of the SKU.
        CampaignNames:
          type: string
          description: The name of the campaigns applied to this order row.
        Discount:
          type: number
          description: The discount amount applied to this order row.
          format: double
        SuggestedRefundAmount:
          type: number
          description: >-
            A suggested refund amount if this order row were to be returned.
            This takes into account discounts applied to the entire order.
          format: double
        AverageDiscount:
          type: number
          description: >-
            The average discount applied to this order row. This takes into
            account discounts applied to the entire order.
          format: double
        PriceBeforeDiscount:
          type: number
          description: The price of the order row before any discounts were applied.
          format: double
      description: An order row.
    Envelope-List-Refund:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Refund'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    RefundQuery:
      type: object
      properties:
        CreatedAfter:
          type: string
          description: Limits refunds to those created after this date.
          format: date-time
        CreatedBefore:
          type: string
          description: Limits refunds to those created before this date.
          format: date-time
        ApprovedAfter:
          type: string
          description: Limits refunds to those approved after this date.
          format: date-time
        ApprovedBefore:
          type: string
          description: Limits refunds to those approved before this date.
          format: date-time
        UpdatedAfter:
          type: string
          description: Limits refunds to those updated after this date.
          format: date-time
        UpdatedBefore:
          type: string
          description: Limits refunds to those updated before this date.
          format: date-time
        IncludeStatuses:
          type: array
          description: "Limits refunds to only those with any of the specified statuses.\r\n0 = All. Include all statuses.\r\n1 = Sent. Include refunds marked as sent.\r\n2 = Settled. Include refunds marked as settled.\r\n3 = SettledManually. Include refunds marked as manually settled.\r\n4 = Processed. Include refunds marked as processed.\r\n5 = Investigation. Include refunds marked for investigation.\r\n6 = Pending approval. Include refunds that are pending approval.\r\n7 = Approved. Include refunds that are approved.\r\nDefaults to All if not set."
          items:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
        ExcludeStatuses:
          type: array
          description: "Limits refunds to only those without any of the specified statuses.\r\n1 = Sent. Exclude refunds marked as sent.\r\n2 = Settled. Exclude refunds marked as settled.\r\n3 = SettledManually. Exclude refunds marked as manually settled.\r\n4 = Processed. Exclude refunds marked as processed.\r\n5 = Investigation. Exclude refunds marked for investigation.\r\n6 = Pending approval. Exclude refunds that are pending approval.\r\n7 = Approved. Exclude refunds that are approved.\r\nO or All is not valid as an exclude status and will not apply."
          items:
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
      description: "Defines a query used to filter refunds. \r\nAll properties are optional."
    Order.Refund.Models.Write.ProcessedRefund:
      type: object
      properties:
        ExternalId:
          type: string
          description: "An external id for the act of setting the refund as processed.\r\nOptional."
        Reference:
          type: string
          description: "An custom reference for the act of setting the refund as processed..\r\nOptional."
        ProcessedOn:
          type: string
          description: "The date the refund was processed. Defaults to now.\r\nOptional."
          format: date-time
    Order.Refund.Models.Write.SettledRefund:
      type: object
      properties:
        SettledByAdminUserId:
          type: integer
          description: "The id of the admin user that settled the refund. Leave blank if unsure. \r\nOptional."
          format: int32
        SettledOn:
          type: string
          description: "The date the refund was settled. Defaults to now.\r\nOptional."
          format: date-time
    Order.Refund.Models.Write.SettledRefundRow:
      type: object
      properties:
        SettledByAdminUserId:
          type: integer
          description: "The id of the admin user that settled the refund. Leave blank if unsure. \r\nOptional."
          format: int32
        SettledOn:
          type: string
          description: "The date the refund was settled. Defaults to now.\r\nOptional."
          format: date-time
    Order.Refund.Models.Write.NewRefund:
      type: object
      properties:
        OrderRowId:
          type: integer
          description: "The order row that this refund row represents. Commonly used with returns.\r\nOptional."
          format: int32
        Reference:
          type: string
          description: "An custom reference for the refund. \r\nOptional."
        Description:
          type: string
          description: "A description of the refund.\r\nOptional."
        Author:
          type: string
          description: "The name of author of the refund.\r\nOptional."
        RefundAmount:
          type: number
          description: "The refund amount.\r\nRequired."
          format: double
        ToBalance:
          type: boolean
          description: If true, will refund the amount to the customer's balance.
        Settled:
          type: boolean
          description: "If true, the refund will be marked as settled immediatley and won't trigger a refund event.\r\nThis can be useful if the refund needs to be created retroactively, or when the money transacation has already occured."
        RefundType:
          type: integer
          description: "What kind of source transaction the refund is derived from.\r\n0 = Default. A regular refund of the order or order row.\r\n1 = InstanceCost. Return cost type, used in drawing cost for instance.\r\n2 = Shipping. Refund shipping type, used to refund shipping.\r\n3 = InvoiceFee. Refund invoice fee.  \r\n0 = Default. A regular refund of the order or order row.  \r\n1 = InstanceCost. Return cost type, used in drawing cost for instance.  \r\n2 = Shipping. Refund shipping type, used to refund shipping.  \r\n3 = InvoiceFee. Refund invoice fee."
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
        SkipRefundEvents:
          type: boolean
          description: If true, will skip sending refund events.
        RefundsRequireApproval:
          type: boolean
          description: >-
            If set to true, refunds will require approval before being sent.
            Only applies if Settled is false.
    Envelope-Nullable-Guid:
      type: object
      properties:
        Resource:
          type: string
          description: The resource on which the action was taken.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Order.Refund.Models.Write.RefundApproval:
      type: object
      properties:
        Approved:
          type: boolean
          description: >-
            The approval decision. Refund will be approved if true and denied if
            false.
        ApprovalDecidedBy:
          type: string
          description: "The name of the user that made the approval decision. \r\nOptional."
        ApprovalDecidedOn:
          type: string
          description: "The date the approval decision was made. Defaults to now.\r\nOptional."
          format: date-time
    Envelope-Return:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Return'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Return:
      type: object
      properties:
        ReturnId:
          type: integer
          description: ''
          format: int32
        OrderId:
          type: integer
          description: ''
          format: int32
        CreatedOn:
          type: string
          description: The date the return was created.
          format: date-time
        ReturnRows:
          type: array
          description: List of return rows belonging to this return.
          items:
            $ref: '#/components/schemas/ReturnRow'
        OrderRows:
          type: array
          description: List of order rows belonging to this return.
          items:
            $ref: '#/components/schemas/Refund.Core.Models.Order.OrderRow'
      description: A return.
    ReturnRow:
      type: object
      properties:
        ReturnId:
          type: integer
          description: The return id that this return row belongs to.
          format: int32
        ReturnRowId:
          type: integer
          description: The id of this return row.
          format: int32
        OrderRowId:
          type: integer
          description: The order row is that this return row belongs to.
          format: int32
        ReturnCode:
          type: integer
          description: The return code for this return row.
          format: int32
        ReturnAction:
          type: integer
          description: "The action taken for this return row.\r\n1 = Investigate. The return row is refunded, but is marked for investigation.\r\n2 = NoRefund. No refund is made for the return row.\r\n3 = RegularRefund. The return row is refunded normally.\r\n4 = RefundToBalance. The return row is refunded to the customer's balance.  \r\n1 = Investigate. The return row is refunded, but is marked for investigation.  \r\n2 = NoRefund. No refund is made for the return row.  \r\n3 = RegularRefund. The return row is refunded normally.  \r\n4 = RefundToBalance. The return row is refunded to the customer's balance."
          format: int32
          enum:
            - 1
            - 2
            - 3
            - 4
      description: A return row.
    Envelope-List-Return:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Return'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Envelope-List-ReturnCode:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/ReturnCode'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    ReturnCode:
      type: object
      properties:
        Code:
          type: integer
          description: The numerical code for the return code.
          format: int32
        Name:
          type: string
          description: The name of the return code.
        AddToStock:
          type: boolean
          description: "If true, any return using this code is suggested to restock the product. \r\nThis is just used to suggest default behaviour - the actual choice is entirely up to the author of the return."
        DefaultReturnAction:
          type: integer
          description: "The default return action for this return code. This is used to determine what type of refund should be created when a return is created using this return code.\r\nThis is just used to suggest default behaviour - the actual choice is entirely up to the author of the return."
          format: int32
      description: >-
        A code used to identify the reason for a return and suggested default
        behaviour.
    Order.Return.Models.Write.NewReturn:
      type: object
      properties:
        ShippingFeeRefund:
          type: number
          description: "How much of the shipping fee to refund. \r\nOptional."
          format: double
        PaymentFeeRefund:
          type: number
          description: "How much of the payment fee to refund. \r\nOptional."
          format: double
        ReturnFee:
          type: number
          description: "The fee that the customer pays for the return. This value will be deducted from the total refund.\r\nOptional."
          format: double
        AdminUserId:
          type: integer
          description: "The id of the admin user that created the return. Leave blank if unsure. \r\nOptional."
          format: int32
        Author:
          type: string
          description: "The name of person or system that created the return. \r\nOptional."
        Reference:
          type: string
          description: "An custom reference for the return. \r\nOptional."
        Description:
          type: string
          description: "A describing text for the return. \r\nOptional."
        SkipReturnEvents:
          type: boolean
          description: If set to true, no return events will be sent.
        SkipProductEvents:
          type: boolean
          description: >-
            If set to true, no product events will be sent for restocked
            products.
        SkipRefundEvents:
          type: boolean
          description: If set to true, no refund events will be sent.
        RefundsRequireApproval:
          type: boolean
          description: If set to true, refunds will require approval before being sent.
        ReturnRows:
          type: array
          description: "The list of return rows to create. Each return row represents an order row that is returned.\r\nRequired."
          items:
            $ref: '#/components/schemas/NewReturnRow'
    NewReturnRow:
      type: object
      properties:
        OrderRowId:
          type: integer
          description: "The order row that this return row represents.\r\nRequired."
          format: int32
        ReturnCode:
          type: integer
          description: "The return code for this return row. The return code is used to tag the return row with a reason.\r\nRequired."
          format: int32
        ReturnAction:
          type: integer
          description: "The return action for this return row. The return action decides what type of refund should be created.\r\nRequired.\r\n1 = Investigate. The return row is refunded, but is marked for investigation.\r\n2 = NoRefund. No refund is made for the return row.\r\n3 = RegularRefund. The return row is refunded normally.\r\n4 = RefundToBalance. The return row is refunded to the customer's balance.  \r\n1 = Investigate. The return row is refunded, but is marked for investigation.  \r\n2 = NoRefund. No refund is made for the return row.  \r\n3 = RegularRefund. The return row is refunded normally.  \r\n4 = RefundToBalance. The return row is refunded to the customer's balance."
          format: int32
          enum:
            - 1
            - 2
            - 3
            - 4
        RefundAmount:
          type: number
          description: "The refund amount for this return row. The refund amount must be less than or equal to the order row value.\r\nRequired."
          format: double
        Restock:
          type: boolean
          description: >-
            Set to true if the product corresponding to this return row should
            be automatically restocked when the return is created.
      description: >-
        Contains all information needed for a new return row when creating a new
        return.
    Envelope-Nullable-Int:
      type: object
      properties:
        Resource:
          type: integer
          description: The resource on which the action was taken.
          format: int32
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Shipping.Models.ShippingQuery:
      type: object
      properties:
        SiteId:
          type: integer
          description: "The site id the delivery options belong to.  \r\nRequired."
          format: int32
        CountryId:
          type: integer
          description: The country id where the order should be shipped to.
          format: int32
        ShippingId:
          type: integer
          description: Geins shipping option id.
          format: int32
        DeliveryOptionId:
          type: string
          description: nShift delivery option id.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        Order:
          $ref: '#/components/schemas/Order.CheckoutOrder'
        MinimumFreeShippingLimit:
          type: number
          description: >-
            The cart sum limit for free shipping. Used for conditions in the
            delivery checkout portal.
          format: double
      description: A query to filter shipping options by.
    Order.CheckoutOrder:
      type: object
      properties:
        OrderId:
          type: string
        ExternalOrderId:
          type: string
        CartId:
          type: string
        SessionId:
          type: string
        SiteId:
          type: integer
          format: int32
        Currency:
          type: string
        Status:
          type: string
        IpAddress:
          type: string
        Message:
          type: string
        InternalMessage:
          type: string
        Locale:
          type: string
        Rows:
          type: array
          items:
            $ref: '#/components/schemas/Order.CheckoutOrderRow'
        CampaignId:
          type: integer
          format: int32
        CampaignCode:
          type: string
        CampaignName:
          type: string
        CampaignIds:
          type: array
          items:
            type: string
        CampaignNames:
          type: array
          items:
            type: string
        CustomerId:
          type: integer
          format: int32
        CustomerTypeId:
          type: integer
          format: int32
        Gender:
          type: integer
          description: "  \r\n0 = Unknown  \r\n1 = Female  \r\n2 = Male"
          format: int32
          enum:
            - 0
            - 1
            - 2
        DateOfBirth:
          type: string
          format: date-time
        PersonalId:
          type: string
        UserAgent:
          type: string
        MetaData:
          type: object
          additionalProperties:
            type: string
        MemberId:
          type: integer
          format: int32
        PaymentId:
          type: integer
          format: int32
        TransactionId:
          type: string
        SecondaryTransactionId:
          type: string
        Country:
          type: string
        Company:
          type: string
        OrganizationNumber:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
        Address1:
          type: string
        Address2:
          type: string
        Zip:
          type: string
        City:
          type: string
        Region:
          type: string
        Phone:
          type: string
        MobilePhone:
          type: string
        CareOf:
          type: string
        ShippingId:
          type: integer
          format: int32
        ShippingCountry:
          type: string
        ShippingCompany:
          type: string
        ShippingOrganizationNumber:
          type: string
        ShippingFirstName:
          type: string
        ShippingLastName:
          type: string
        ShippingEmail:
          type: string
        ShippingAddress1:
          type: string
        ShippingAddress2:
          type: string
        ShippingZip:
          type: string
        ShippingCity:
          type: string
        ShippingRegion:
          type: string
        ShippingPhone:
          type: string
        ShippingMobilePhone:
          type: string
        ShippingCareOf:
          type: string
        PickupPoint:
          type: string
        DesiredDeliveryDate:
          type: string
          format: date-time
        FreightClass:
          $ref: '#/components/schemas/Order.FreightClass'
        FreeShippingLimit:
          type: number
          format: double
        FreeShippingFromLimit:
          type: boolean
        FreeShippingFromCampaign:
          type: boolean
        Sum:
          type: number
          format: double
          readOnly: true
        ExpectedSum:
          type: number
          format: double
        OrderValueIncVat:
          type: number
          format: double
          readOnly: true
        OrderValueExVat:
          type: number
          format: double
          readOnly: true
        ItemValueIncVat:
          type: number
          format: double
          readOnly: true
        ItemValueExVat:
          type: number
          format: double
          readOnly: true
        DiscountIncVat:
          type: number
          format: double
        DiscountExVat:
          type: number
          format: double
        PercentDiscount:
          type: integer
          format: int32
        Balance:
          type: number
          format: double
        ShippingFeeIncVat:
          type: number
          format: double
        ShippingFeeExVat:
          type: number
          format: double
        PaymentFeeIncVat:
          type: number
          format: double
        PaymentFeeExVat:
          type: number
          format: double
    Order.CheckoutOrderRow:
      type: object
      properties:
        Sku:
          type: string
        ProductId:
          type: integer
          format: int32
        ExternalId:
          type: string
        DiscountRate:
          type: number
          format: double
        CartRowId:
          type: integer
          format: int32
        ProductContainerBuildId:
          type: integer
          format: int32
        Message:
          type: string
        ArticleNumber:
          type: string
        Gtin:
          type: string
        Brand:
          type: string
        Categories:
          type: array
          items:
            type: string
        Name:
          type: string
        Variant:
          type: string
        Quantity:
          type: integer
          format: int32
        PriceIncVat:
          type: number
          format: double
        PriceExVat:
          type: number
          format: double
        ExpectedTotalPriceIncVat:
          type: number
          format: double
        DiscountIncVat:
          type: number
          format: double
        DiscountExVat:
          type: number
          format: double
        ExpectedTotalDiscountIncVat:
          type: number
          format: double
        ProductUrl:
          type: string
        ImageUrl:
          type: string
        Weight:
          type: integer
          format: int32
        Height:
          type: integer
          format: int32
        Width:
          type: integer
          format: int32
        Length:
          type: integer
          format: int32
        CampaignIds:
          type: array
          items:
            type: string
        CampaignGroupData:
          type: string
        CampaignNames:
          type: array
          items:
            type: string
        ProductPriceCampaignId:
          type: integer
          format: int32
        ProductPriceListId:
          type: integer
          format: int32
        ProductPackageId:
          type: integer
          format: int32
        ProductPackageName:
          type: string
        ProductPackageGroupId:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    Order.FreightClass:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        Type:
          type: integer
          format: int32
        Name:
          type: string
        TypeAsEnum:
          type: integer
          description: "  \r\n0 = Normal  \r\n1 = All  \r\n2 = Any"
          format: int32
          readOnly: true
          enum:
            - 0
            - 1
            - 2
    Shipping.Models.ShippingOption:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        ExternalId:
          type: string
        Name:
          type: string
        Fee:
          type: number
          format: double
        Logo:
          type: string
        ShippingData:
          type: string
        Options:
          type: array
          items:
            $ref: '#/components/schemas/Shipping.Models.ShippingSubOption'
    Shipping.Models.ShippingSubOption:
      type: object
      properties:
        Id:
          type: integer
          format: int32
        ExternalId:
          type: string
        Name:
          type: string
        Fee:
          type: number
          format: double
        Logo:
          type: string
        ShippingData:
          type: string
    Shipping.Models.ParcelGroupQuery:
      type: object
      properties:
        ParcelGroupIds:
          type: array
          description: A list of parcel group ids.
          items:
            type: integer
            format: int32
        OrderIds:
          type: array
          description: A list of order ids.
          items:
            type: integer
            format: int32
      description: A query to filter parcel groups by.
    Envelope-List-Shipping.Models.Read.ParcelGroup:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Shipping.Models.Read.ParcelGroup'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Shipping.Models.Read.ParcelGroup:
      type: object
      properties:
        ParcelGroupId:
          type: integer
          format: int32
        CreatedDate:
          type: string
          format: date-time
        DeliveredDate:
          type: string
          format: date-time
        Parcels:
          type: array
          items:
            $ref: '#/components/schemas/Shipping.Models.Read.Parcel'
    Shipping.Models.Read.Parcel:
      type: object
      properties:
        ParcelGroupId:
          type: integer
          format: int32
        ParcelId:
          type: integer
          format: int32
        OrderId:
          type: integer
          format: int32
        OrderRowIds:
          type: array
          items:
            type: integer
            format: int32
        CreatedDate:
          type: string
          format: date-time
    Shipping.Models.ParcelGroupOptions:
      type: object
      properties:
        OrderIds:
          type: array
          description: "The order ids contained in this parcel group.\r\nRequired."
          items:
            type: integer
            format: int32
        OrderRowIds:
          type: array
          description: "Limits which order rows are included for each order defined in OrderIds. Use this to create partial deliveries.  \r\nIf any order rows are defined for a given order then only those order rows will be used, eg a partial delivery.  \r\nIf no order rows are defined for a given order then all remaining undelivered order rows will be implied.  \r\nOptional."
          items:
            type: integer
            format: int32
        MarkAsDelivered:
          type: boolean
          description: "Set to true to automatically mark orders as delivered upon creation of the parcel group.  \r\nDefaults to false.  \r\nOptional."
        SendDeliveryEmail:
          type: boolean
          description: "Set to true to automatically send delivery email upon creation of the parcel group.  \r\nRequires that MarkAsDelivered is also set to true.  \r\nDefaults to false.  \r\nOptional."
        SignalCapturesCreated:
          type: boolean
          description: "Set to true to create captures and automatically signal capture events upon creation of the parcel group.  \r\nDefaults to false.  \r\nOptional."
      description: Creation options for new parcel groups.
    System.Threading.CancellationToken:
      type: object
      properties:
        IsCancellationRequested:
          type: boolean
          readOnly: true
        CanBeCanceled:
          type: boolean
          readOnly: true
        WaitHandle:
          $ref: '#/components/schemas/System.Threading.WaitHandle'
    System.Threading.WaitHandle:
      type: object
      properties:
        SafeWaitHandle:
          $ref: '#/components/schemas/Microsoft.Win32.SafeHandles.SafeWaitHandle'
    Microsoft.Win32.SafeHandles.SafeWaitHandle:
      type: object
      properties:
        IsInvalid:
          type: boolean
          readOnly: true
        IsClosed:
          type: boolean
          readOnly: true
    JsonSitemap:
      type: object
      properties:
        Urlset:
          type: array
          description: All urls present in the sitemap.
          items:
            $ref: '#/components/schemas/JsonSitemap.UrlEntry'
      description: A JSON representation of a sitemap.
    JsonSitemap.UrlEntry:
      type: object
      properties:
        Url:
          type: string
          description: The url of the entry.
        Type:
          type: string
          description: "The type of entity that the url points to. \r\nThis can be one of the following: Brand, Category, Product, Page, DiscountCampaign, ParameterValue."
      description: An url entry in the sitemap.
    Envelope-Supplier.Models.Read.Supplier:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Supplier.Models.Read.Supplier'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Supplier.Models.Read.Supplier:
      type: object
      properties:
        SupplierId:
          type: integer
          description: The unique identifier for the supplier.
          format: int32
        Name:
          type: string
          description: The name of the supplier.
        Address1:
          type: string
          description: The first address line of the supplier.
        Address2:
          type: string
          description: The second address line of the supplier.
        Address3:
          type: string
          description: The third address line of the supplier.
        ZipCode:
          type: string
          description: The zip code of the supplier.
        City:
          type: string
          description: The city of the supplier.
        Country:
          type: string
          description: The country of the supplier.
        ContactPerson:
          type: string
          description: The contact person of the supplier.
        Phone1:
          type: string
          description: The primary phone number of the supplier.
        Phone2:
          type: string
          description: The secondary phone number of the supplier.
        Email:
          type: string
          description: The email address of the supplier.
        ExternalId:
          type: string
          description: External Id of the supplier.
      description: A product supplier.
    Supplier.Models.Write.Supplier:
      type: object
      properties:
        Name:
          type: string
          description: The name of the supplier.
        Address1:
          type: string
          description: The first address line of the supplier.
        Address2:
          type: string
          description: The second address line of the supplier.
        Address3:
          type: string
          description: The third address line of the supplier.
        ZipCode:
          type: string
          description: The zip code of the supplier.
        City:
          type: string
          description: The city of the supplier.
        Country:
          type: string
          description: The country of the supplier.
        ContactPerson:
          type: string
          description: The contact person of the supplier.
        Phone1:
          type: string
          description: The primary phone number of the supplier.
        Phone2:
          type: string
          description: The secondary phone number of the supplier.
        Email:
          type: string
          description: The email address of the supplier.
        ExternalId:
          type: string
          description: External Id of the supplier.
      description: A product supplier.
    Supplier.Models.SupplierQuery:
      type: object
      properties:
        NameContains:
          type: string
          description: >-
            Limits query to suppliers with a name containing the specified
            string.
        ExternalIds:
          type: array
          description: Limits query to externalIds.
          items:
            type: string
      description: "A supplier query.  \r\nAll fields are optional."
    Envelope-User.Models.Read.UserProfile:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/User.Models.Read.UserProfile'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    User.Models.Read.UserProfile:
      type: object
      properties:
        UserId:
          type: integer
          format: int32
        SiteId:
          type: integer
          format: int32
        Email:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        PhoneNr:
          type: string
        MobilePhoneNr:
          type: string
        Company:
          type: string
        Address:
          type: string
        Address2:
          type: string
        Address3:
          type: string
        DoorCode:
          type: string
        PersonalId:
          type: string
        Birthyear:
          type: string
        Zip:
          type: string
        City:
          type: string
        CareOf:
          type: string
        Country:
          type: string
        MemberId:
          type: integer
          format: int32
        MemberType:
          type: string
        CountryId:
          type: integer
          format: int32
        UserTypeId:
          type: integer
          format: int32
        Gender:
          type: boolean
        MemberDiscount:
          type: integer
          format: int32
        Newsletter:
          type: boolean
          description: Decides whether the user should be subscribed to the newsletter.
        Blacklisted:
          type: boolean
        Active:
          type: boolean
        CreatedOn:
          type: string
          format: date-time
        UpdatedOn:
          type: string
          format: date-time
        MetaData:
          type: string
        BlacklistedOn:
          type: string
          format: date-time
        BlacklistReason:
          type: string
    User.Models.Write.UserProfile:
      type: object
      properties:
        SiteId:
          type: integer
          format: int32
        Email:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        PhoneNr:
          type: string
        MobilePhoneNr:
          type: string
        Company:
          type: string
        UserTypeId:
          type: integer
          format: int32
        Address:
          type: string
        Address2:
          type: string
        Address3:
          type: string
        DoorCode:
          type: string
        PersonalId:
          type: string
        Birthyear:
          type: string
        Zip:
          type: string
        City:
          type: string
        CareOf:
          type: string
        Country:
          type: string
        CountryId:
          type: integer
          format: int32
        Gender:
          type: boolean
        Password:
          type: string
        Newsletter:
          type: boolean
          description: Decides whether the user should be subscribed to the newsletter.
        MetaData:
          type: string
          description: >-
            Free-text field for any additional data that should be stored with
            the user.
    User.Models.UserProfileQuery:
      type: object
      properties:
        CreatedBefore:
          type: string
          description: Limits query to users created before the specified date.
          format: date-time
        CreatedAfter:
          type: string
          description: Limits query to users created after the specified date.
          format: date-time
        UpdatedAfter:
          type: string
          description: Limits query to users updated after the specified date.
          format: date-time
        IncludeInactive:
          type: boolean
          description: Set to true to include inactive users in the query.
        BatchId:
          type: string
          description: Used to fetch products where the result set is split into batches.
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        UserId:
          type: integer
          format: int32
        Email:
          type: string
      description: A user query.
    PagedEnvelope-List-User.Models.Read.UserProfile:
      type: object
      properties:
        PageResult:
          $ref: '#/components/schemas/PageResult'
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/User.Models.Read.UserProfile'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
    Envelope-List-User.Models.Read.BalanceType:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/User.Models.Read.BalanceType'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    User.Models.Read.BalanceType:
      type: object
      properties:
        Name:
          type: string
    Envelope-User.Models.Read.Balance:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/User.Models.Read.Balance'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    User.Models.Read.Balance:
      type: object
      properties:
        CurrentBalance:
          type: number
          format: double
        Currency:
          type: string
    Envelope-List-User.Models.Read.BalanceTransaction:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/User.Models.Read.BalanceTransaction'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    User.Models.Read.BalanceTransaction:
      type: object
      properties:
        BalanceType:
          type: string
          description: The type of balance.
        Currency:
          type: string
          description: >-
            The currency of this balance transaction. 3-letter ISO currency
            code.
        ExternalId:
          type: integer
          description: An optional external id of the transaction.
          format: int32
        Text:
          type: string
          description: Additional optional information about the transaction.
        Amount:
          type: number
          description: The transaction amount.
          format: double
        CreatedOn:
          type: string
          description: The date the transaction was created.
          format: date-time
    User.Models.Write.BalanceTransaction:
      type: object
      properties:
        BalanceType:
          type: string
          description: "The type of balance. See the separate endpoint for available balance types.\r\nRequired."
        Currency:
          type: string
          description: "The currency of this balance transaction. 3-letter ISO currency code.  \r\nOptional. Will default to the users default currency if not specified."
        ExternalId:
          type: integer
          description: An optional external id of the transaction.
          format: int32
        Text:
          type: string
          description: Additional optional information about the transaction.
        Amount:
          type: number
          description: "The amount to add to balance. Can be negative.  \r\nRequired."
          format: double
    Envelope-List-System.String:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            type: string
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Envelope-Variant.Models.Read.VariantGroup:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Variant.Models.Read.VariantGroup'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Variant.Models.Read.VariantGroup:
      type: object
      properties:
        GroupId:
          type: integer
          description: The id of variant goup.
          format: int32
        Name:
          type: string
          description: The optional internal name of the variant group.
        CollapseInLists:
          type: boolean
          description: Determine visibility of non-main products of this group in lists.
        MainProductId:
          type: integer
          description: >-
            The main product of this group. If the group is collapsed in lists,
            this will be the only visible product.
          format: int32
        ProductIds:
          type: array
          description: The product ids of the variants that belong to this group.
          items:
            type: integer
            format: int32
        Products:
          type: array
          description: >-
            Products belonging to the Variant group. Only included when
            parameter "include" is supplied in the query string.
          items:
            $ref: '#/components/schemas/Product.Models.Read.Product'
      description: A variant group for a collection of related variants.
    Variant.Models.Write.VariantGroup:
      type: object
      properties:
        Name:
          type: string
          description: The optional internal name of the variant group.
        CollapseInLists:
          type: boolean
          description: >-
            A setting to control the display behaviour in product listings of
            variants belonging to this group.
        VariantLabels:
          type: array
          description: The labels of the variant data that this group keeps track of.
          items:
            type: string
        Products:
          type: array
          description: Products to be created and connected to the group.
          items:
            $ref: '#/components/schemas/Product.Models.Write.Product'
      description: A variant group for a collection of related variants.
    Envelope-List-Variant.Models.Read.Variant:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Variant.Models.Read.Variant'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Envelope-Geins.WebhookItem:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Geins.WebhookItem'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Geins.WebhookItem:
      type: object
      properties:
        Id:
          type: string
          description: Webhook Id
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        Entity:
          type: integer
          description: "Type of entity.  \r\n0 = NOT_SET  \r\n1 = Brand  \r\n2 = Capture  \r\n3 = Category  \r\n4 = Customer  \r\n5 = Order  \r\n6 = PageWidget  \r\n7 = Product  \r\n8 = Refund  \r\n9 = Supplier"
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
        Name:
          type: string
          description: Webhook Name
        Description:
          type: string
          description: Webhook Description
        Actions:
          type: string
          description: "Comma separated list of actions to listen for. \r\nPossible actions per entity are:\r\n- **Product, Brand, Category, Supplier** - `create`, `update`, `delete`\r\n- **Order** - `create`, `update`, `cancel`, `activate`, `lock`, `complete`\r\n- **Capture, Refund** - `create`\r\n- **PageWidget** - `update`, `delete`\r\n- **Customer** - `delete`, `passwordreset`, `obfuscate`"
        Method:
          type: string
          description: Http Method to use
        Url:
          type: string
          description: "Url to send the webhook to. Placeholders can be used to customize the URL. \r\n- _Always available placeholders:_ \r\n  - `{{entity}}` - Product, Brand, Category, etc\r\n  - `{{action}}` - create, update, delete, etc\r\n  - `{{account}}` - usually the name of your webshop\r\n  - `{{environment}}` - prod, dev, qa, etc\r\n  - `{{id}}` -(can be a comma separated list of ids.\r\n- _Partially available placeholders:_ \r\n  - `{{paymentName}}` - name of payment method. Only applicable for capture and refund\r\n  - `{{channelName}}` - name of the channel (web site). Only applicable for capture and refund\r\n  - `{{channelUrl}}` - url of the channel (web site). Only applicable for password reset\r\n  - `{{resetKey}}` - key for password reset. Only applicable for password reset  \r\n**Note:** Not all placeholders are available for all combinations of entities and actions. Ensure that the placeholders you use are relevant to the webhook's entity and action."
        Body:
          type: string
          description: "Body of the webhook. Placeholders can be used to customize the body. \r\n- _Always available placeholders:_ \r\n  - `{{entity}}` - Product, Brand, Category, etc\r\n  - `{{action}}` - create, update, delete, etc\r\n  - `{{account}}` - usually the name of your webshop\r\n  - `{{environment}}` - prod, dev, qa, etc\r\n  - `{{id}}` -(can be a comma separated list of ids.\r\n- _Partially available placeholders:_ \r\n  - `{{paymentName}}` - name of payment method. Only applicable for capture and refund\r\n  - `{{channelName}}` - name of the channel (web site). Only applicable for capture and refund\r\n  - `{{channelUrl}}` - url of the channel (web site). Only applicable for password reset\r\n  - `{{resetKey}}` - key for password reset. Only applicable for password reset  \r\n**Note:** Not all placeholders are available for all combinations of entities and actions. Ensure that the placeholders you use are relevant to the webhook's entity and action."
        Headers:
          type: string
          description: Headers to send with the webhook
        Retry:
          type: boolean
          description: "True if the webhook should be retried on failure. Retries are attempted up to 3 times with an interval of 10 minutes.  \r\n- Each retry attempt will include a unique HTTP header called `x-Idempotency-Key` and a timestamp for when the webhook event was initiated. This key serves as an identifier for each specific webhook event and remains the same for all retry attempts of the same webhook event.  \r\n- The primary purpose of the `x-Idempotency-Key` is to enable the receiving system to identify and handle duplicate webhook events, thus preventing duplicate processing of the same webhook event.  \r\n- The timestamp header is called `x-timestamp`."
      description: A data model for webhook Registrations
    Webhook.Models.RestWebhook:
      type: object
      properties:
        Entity:
          type: integer
          description: "Type of entity.  \r\n0 = NOT_SET  \r\n1 = Brand  \r\n2 = Capture  \r\n3 = Category  \r\n4 = Customer  \r\n5 = Order  \r\n6 = PageWidget  \r\n7 = Product  \r\n8 = Refund  \r\n9 = Supplier"
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
        Name:
          type: string
          description: Webhook Name
        Description:
          type: string
          description: Webhook Description
        Actions:
          type: string
          description: "Comma separated list of actions to listen for. \r\nPossible actions per entity are:\r\n- **Product, Brand, Category, Supplier** - `create`, `update`, `delete`\r\n- **Order** - `create`, `update`, `cancel`, `activate`, `lock`, `complete`\r\n- **Capture, Refund** - `create`\r\n- **PageWidget** - `update`, `delete`\r\n- **Customer** - `delete`, `passwordreset`, `obfuscate`"
        Method:
          type: string
          description: Http Method to use
        Url:
          type: string
          description: "Url to send the webhook to. Placeholders can be used to customize the URL. \r\n- _Always available placeholders:_ \r\n  - `{{entity}}` - Product, Brand, Category, etc\r\n  - `{{action}}` - create, update, delete, etc\r\n  - `{{account}}` - usually the name of your webshop\r\n  - `{{environment}}` - prod, dev, qa, etc\r\n  - `{{id}}` -(can be a comma separated list of ids.\r\n- _Partially available placeholders:_ \r\n  - `{{paymentName}}` - name of payment method. Only applicable for capture and refund\r\n  - `{{channelName}}` - name of the channel (web site). Only applicable for capture and refund\r\n  - `{{channelUrl}}` - url of the channel (web site). Only applicable for password reset\r\n  - `{{resetKey}}` - key for password reset. Only applicable for password reset  \r\n**Note:** Not all placeholders are available for all combinations of entities and actions. Ensure that the placeholders you use are relevant to the webhook's entity and action."
        Body:
          type: string
          description: "Body of the webhook. Placeholders can be used to customize the body. \r\n- _Always available placeholders:_ \r\n  - `{{entity}}` - Product, Brand, Category, etc\r\n  - `{{action}}` - create, update, delete, etc\r\n  - `{{account}}` - usually the name of your webshop\r\n  - `{{environment}}` - prod, dev, qa, etc\r\n  - `{{id}}` -(can be a comma separated list of ids.\r\n- _Partially available placeholders:_ \r\n  - `{{paymentName}}` - name of payment method. Only applicable for capture and refund\r\n  - `{{channelName}}` - name of the channel (web site). Only applicable for capture and refund\r\n  - `{{channelUrl}}` - url of the channel (web site). Only applicable for password reset\r\n  - `{{resetKey}}` - key for password reset. Only applicable for password reset  \r\n**Note:** Not all placeholders are available for all combinations of entities and actions. Ensure that the placeholders you use are relevant to the webhook's entity and action."
        Headers:
          type: string
          description: Headers to send with the webhook
        Retry:
          type: boolean
          description: "True if the webhook should be retried on failure. Retries are attempted up to 3 times with an interval of 10 minutes.  \r\n- Each retry attempt will include a unique HTTP header called `x-Idempotency-Key` and a timestamp for when the webhook event was initiated. This key serves as an identifier for each specific webhook event and remains the same for all retry attempts of the same webhook event.  \r\n- The primary purpose of the `x-Idempotency-Key` is to enable the receiving system to identify and handle duplicate webhook events, thus preventing duplicate processing of the same webhook event.  \r\n- The timestamp header is called `x-timestamp`."
    Envelope-Nullable-System.Boolean:
      type: object
      properties:
        Resource:
          type: boolean
          description: The resource on which the action was taken.
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
    Envelope-List-Geins.WebhookItem:
      type: object
      properties:
        Resource:
          type: array
          description: The resource on which the action was taken.
          items:
            $ref: '#/components/schemas/Geins.WebhookItem'
        Message:
          type: string
          description: A status message for the action taken.
        Details:
          type: array
          description: Any validation messages for the data on the current action.
          items:
            type: string
      description: An envelope for the result and resource returned from an action.
  securitySchemes:
    basicAuth:
      type: http
      description: Basic Authorization header using the Bearer scheme.
      scheme: basic
    apiKey:
      type: apiKey
      description: X-ApiKey
      name: X-ApiKey
      in: header
x-original-swagger-version: '2.0'
